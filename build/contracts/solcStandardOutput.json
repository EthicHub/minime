{
  "contracts": {
    "./contracts/Controlled.sol": {
      "Controlled": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newController",
                "type": "address"
              }
            ],
            "name": "changeController",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "controller",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          }
        ],
        "devdoc": {
          "methods": {
            "changeController(address)": {
              "params": {
                "_newController": "The new controller of the contract"
              }
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a03199091161790556101668061003b6000396000f30060606040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633cebb8238114610050578063f77c47911461007e575b600080fd5b341561005b57600080fd5b61007c73ffffffffffffffffffffffffffffffffffffffff600435166100ba565b005b341561008957600080fd5b61009161011e565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000543373ffffffffffffffffffffffffffffffffffffffff9081169116146100e257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058201d477e684afaff70a8ed6b40f2f0356af0f4b1bf884fd1ca98b039a704a919cb0029",
            "sourceMap": "26:548:0:-;;;274:56;;;;;;;;305:10;:23;;-1:-1:-1;;;;;318:10:0;305:23;-1:-1:-1;;;;;;305:23:0;;;;;;26:548;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "60606040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633cebb8238114610050578063f77c47911461007e575b600080fd5b341561005b57600080fd5b61007c73ffffffffffffffffffffffffffffffffffffffff600435166100ba565b005b341561008957600080fd5b61009161011e565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000543373ffffffffffffffffffffffffffffffffffffffff9081169116146100e257600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058201d477e684afaff70a8ed6b40f2f0356af0f4b1bf884fd1ca98b039a704a919cb0029",
            "sourceMap": "26:548:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;456:116;;;;;;;;;;;;;;;;;;242:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;456:116;219:10;;205;219;205:24;;;219:10;;205:24;197:33;;;;;;538:10;:27;;-1:-1:-1;;538:27:0;;;;;;;;;;;;456:116::o;242:25::-;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "71600",
              "executionCost": "20491",
              "totalCost": "92091"
            },
            "external": {
              "changeController(address)": "20622",
              "controller()": "410"
            }
          },
          "methodIdentifiers": {
            "changeController(address)": "3cebb823",
            "controller()": "f77c4791"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{\"changeController(address)\":{\"params\":{\"_newController\":\"The new controller of the contract\"}}}},\"userdoc\":{\"methods\":{\"changeController(address)\":{\"notice\":\"Changes the controller of the contract\"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/Controlled.sol\":\"Controlled\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":./Controlled.sol=./contracts/Controlled.sol\",\":./TokenController.sol=./contracts/TokenController.sol\",\":MiniMeToken.sol=./contracts/MiniMeToken.sol\"]},\"sources\":{\"./contracts/Controlled.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController { require(msg.sender == controller); _; }\\n\\n    address public controller;\\n\\n    function Controlled() public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) public onlyController {\\n        controller = _newController;\\n    }\\n}\\n\",\"keccak256\":\"0x770798704985a4588762ea932b913bc1df01b4625ab86c5a7278883bbde44b78\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "changeController(address)": {
              "notice": "Changes the controller of the contract"
            }
          }
        }
      }
    },
    "./contracts/MiniMeToken.sol": {
      "ApproveAndCallFallBack": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "from",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              },
              {
                "name": "_token",
                "type": "address"
              },
              {
                "name": "_data",
                "type": "bytes"
              }
            ],
            "name": "receiveApproval",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "receiveApproval(address,uint256,address,bytes)": "8f4ffcb1"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      },
      "MiniMeToken": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "name": "",
                "type": "string"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "name": "success",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "creationBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_from",
                "type": "address"
              },
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "name": "success",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "name": "",
                "type": "uint8"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newController",
                "type": "address"
              }
            ],
            "name": "changeController",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_blockNumber",
                "type": "uint256"
              }
            ],
            "name": "balanceOfAt",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "version",
            "outputs": [
              {
                "name": "",
                "type": "string"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_cloneTokenName",
                "type": "string"
              },
              {
                "name": "_cloneDecimalUnits",
                "type": "uint8"
              },
              {
                "name": "_cloneTokenSymbol",
                "type": "string"
              },
              {
                "name": "_snapshotBlock",
                "type": "uint256"
              },
              {
                "name": "_transfersEnabled",
                "type": "bool"
              }
            ],
            "name": "createCloneToken",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "name": "balance",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "parentToken",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "generateTokens",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "name": "",
                "type": "string"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_blockNumber",
                "type": "uint256"
              }
            ],
            "name": "totalSupplyAt",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "name": "success",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "transfersEnabled",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "parentSnapShotBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              },
              {
                "name": "_extraData",
                "type": "bytes"
              }
            ],
            "name": "approveAndCall",
            "outputs": [
              {
                "name": "success",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "destroyTokens",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "name": "remaining",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "claimTokens",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "tokenFactory",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_transfersEnabled",
                "type": "bool"
              }
            ],
            "name": "enableTransfers",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "controller",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_tokenFactory",
                "type": "address"
              },
              {
                "name": "_parentToken",
                "type": "address"
              },
              {
                "name": "_parentSnapShotBlock",
                "type": "uint256"
              },
              {
                "name": "_tokenName",
                "type": "string"
              },
              {
                "name": "_decimalUnits",
                "type": "uint8"
              },
              {
                "name": "_tokenSymbol",
                "type": "string"
              },
              {
                "name": "_transfersEnabled",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "payable": true,
            "stateMutability": "payable",
            "type": "fallback"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_token",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_controller",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "ClaimedTokens",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_to",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_cloneToken",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "_snapshotBlock",
                "type": "uint256"
              }
            ],
            "name": "NewCloneToken",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_owner",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_spender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {
            "allowance(address,address)": {
              "details": "This function makes it easy to read the `allowed[]` map",
              "params": {
                "_owner": "The address of the account that owns the token",
                "_spender": "The address of the account able to transfer the tokens"
              },
              "return": "Amount of remaining tokens of _owner that _spender is allowed  to spend"
            },
            "approve(address,uint256)": {
              "params": {
                "_amount": "The amount of tokens to be approved for transfer",
                "_spender": "The address of the account able to transfer the tokens"
              },
              "return": "True if the approval was successful"
            },
            "approveAndCall(address,uint256,bytes)": {
              "params": {
                "_amount": "The amount of tokens to be approved for transfer",
                "_spender": "The address of the contract able to transfer the tokens"
              },
              "return": "True if the function call was successful"
            },
            "balanceOf(address)": {
              "params": {
                "_owner": "The address that's balance is being requested"
              },
              "return": "The balance of `_owner` at the current block"
            },
            "balanceOfAt(address,uint256)": {
              "details": "Queries the balance of `_owner` at a specific `_blockNumber`",
              "params": {
                "_blockNumber": "The block number when the balance is queried",
                "_owner": "The address from which the balance will be retrieved"
              },
              "return": "The balance at `_blockNumber`"
            },
            "changeController(address)": {
              "params": {
                "_newController": "The new controller of the contract"
              }
            },
            "claimTokens(address)": {
              "params": {
                "_token": "The address of the token contract that you want to recover  set to 0 in case you want to extract ether."
              }
            },
            "createCloneToken(string,uint8,string,uint256,bool)": {
              "params": {
                "_cloneDecimalUnits": "Number of decimals of the smallest unit",
                "_cloneTokenName": "Name of the clone token",
                "_cloneTokenSymbol": "Symbol of the clone token",
                "_snapshotBlock": "Block when the distribution of the parent token is  copied to set the initial distribution of the new clone token;  if the block is zero than the actual block, the current block is used",
                "_transfersEnabled": "True if transfers are allowed in the clone"
              },
              "return": "The address of the new MiniMeToken Contract"
            },
            "destroyTokens(address,uint256)": {
              "params": {
                "_amount": "The quantity of tokens to burn",
                "_owner": "The address that will lose the tokens"
              },
              "return": "True if the tokens are burned correctly"
            },
            "enableTransfers(bool)": {
              "params": {
                "_transfersEnabled": "True if transfers are allowed in the clone"
              }
            },
            "generateTokens(address,uint256)": {
              "params": {
                "_amount": "The quantity of tokens generated",
                "_owner": "The address that will be assigned the new tokens"
              },
              "return": "True if the tokens are generated correctly"
            },
            "totalSupply()": {
              "details": "This function makes it easy to get the total number of tokens",
              "return": "The total number of tokens"
            },
            "totalSupplyAt(uint256)": {
              "params": {
                "_blockNumber": "The block number when the totalSupply is queried"
              },
              "return": "The total amount of tokens at `_blockNumber`"
            },
            "transfer(address,uint256)": {
              "params": {
                "_amount": "The amount of tokens to be transferred",
                "_to": "The address of the recipient"
              },
              "return": "Whether the transfer was successful or not"
            },
            "transferFrom(address,address,uint256)": {
              "params": {
                "_amount": "The amount of tokens to be transferred",
                "_from": "The address holding the tokens being transferred",
                "_to": "The address of the recipient"
              },
              "return": "True if the transfer was successful"
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": "1541:19840:1:-;;;1809:33;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4244:728;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;305:10:0;:23;;-1:-1:-1;;;;;318:10:0;305:23;;-1:-1:-1;;;;;;305:23:0;;;;;;;;;;4501:12:1;:48;;;;;305:23:0;4501:48:1;-1:-1:-1;;;;;;4501:48:1;;;;;;;;;4244:728;-1:-1:-1;305:23:0;;-1:-1:-1;4566:10:1;;4559:17;;;;;;;;:::i;:::-;-1:-1:-1;4634:8:1;:24;;-1:-1:-1;;4634:24:1;;;;;;;4713:6;4722:12;;4713:21;;;;;;;;:::i;:::-;-1:-1:-1;4790:11:1;:39;;-1:-1:-1;;;;;;4790:39:1;-1:-1:-1;;;;;4790:39:1;;;;;;;;;;;-1:-1:-1;;;4839:19:1;:42;4891:16;:36;;-1:-1:-1;;4891:36:1;;;;;;;;;;-1:-1:-1;4953:12:1;4937:13;:28;1541:19840;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1541:19840:1;;;-1:-1:-1;1541:19840:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "60606040526004361061012f5763ffffffff60e060020a60003504166306fdde0381146101d4578063095ea7b31461025e578063176345141461029457806318160ddd146102b957806323b872dd146102cc578063313ce567146102f45780633cebb8231461031d5780634ee2cd7e1461033c57806354fd4d501461035e5780636638c0871461037157806370a082311461043557806380a5400114610454578063827f32c01461046757806395d89b4114610489578063981b24d01461049c578063a9059cbb146104b2578063bef97c87146104d4578063c5bcc4f1146104e7578063cae9ca51146104fa578063d3ce77fe1461055f578063dd62ed3e14610581578063df8de3e7146105a6578063e77772fe146105c5578063f41e60c5146105d8578063f77c4791146105f0575b60005461014490600160a060020a0316610603565b151561014f57600080fd5b60008054600160a060020a03169063f48c305490349033906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390911660048201526024016020604051808303818588803b15156101ab57600080fd5b6125ee5a03f115156101bc57600080fd5b505050506040518051905015156101d257600080fd5b005b34156101df57600080fd5b6101e7610630565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561022357808201518382015260200161020b565b50505050905090810190601f1680156102505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026957600080fd5b610280600160a060020a03600435166024356106ce565b604051901515815260200160405180910390f35b341561029f57600080fd5b6102a7610837565b60405190815260200160405180910390f35b34156102c457600080fd5b6102a761083d565b34156102d757600080fd5b610280600160a060020a036004358116906024351660443561084e565b34156102ff57600080fd5b6103076108ed565b60405160ff909116815260200160405180910390f35b341561032857600080fd5b6101d2600160a060020a03600435166108f6565b341561034757600080fd5b6102a7600160a060020a0360043516602435610940565b341561036957600080fd5b6101e7610a76565b341561037c57600080fd5b61041960046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803560ff1690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650508435946020013515159350610ae192505050565b604051600160a060020a03909116815260200160405180910390f35b341561044057600080fd5b6102a7600160a060020a0360043516610d0b565b341561045f57600080fd5b610419610d1f565b341561047257600080fd5b610280600160a060020a0360043516602435610d2e565b341561049457600080fd5b6101e7610dec565b34156104a757600080fd5b6102a7600435610e57565b34156104bd57600080fd5b610280600160a060020a0360043516602435610f40565b34156104df57600080fd5b610280610f68565b34156104f257600080fd5b6102a7610f71565b341561050557600080fd5b61028060048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610f7795505050505050565b341561056a57600080fd5b610280600160a060020a0360043516602435611092565b341561058c57600080fd5b6102a7600160a060020a036004358116906024351661114a565b34156105b157600080fd5b6101d2600160a060020a0360043516611175565b34156105d057600080fd5b610419611321565b34156105e357600080fd5b6101d26004351515611335565b34156105fb57600080fd5b610419611363565b600080600160a060020a038316151561061f576000915061062a565b823b90506000811191505b50919050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106c65780601f1061069b576101008083540402835291602001916106c6565b820191906000526020600020905b8154815290600101906020018083116106a957829003601f168201915b505050505081565b600b5460009060ff1615156106e257600080fd5b8115806107125750600160a060020a03338116600090815260096020908152604080832093871683529290522054155b151561071d57600080fd5b60005461073290600160a060020a0316610603565b156107cd5760008054600160a060020a03169063da682aeb903390869086906040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156107a757600080fd5b6102c65a03f115156107b857600080fd5b5050506040518051905015156107cd57600080fd5b600160a060020a03338116600081815260096020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60075481565b600061084843610e57565b90505b90565b6000805433600160a060020a039081169116146108d857600b5460ff16151561087657600080fd5b600160a060020a0380851660009081526009602090815260408083203390941683529290522054829010156108aa57600080fd5b600160a060020a03808516600090815260096020908152604080832033909416835292905220805483900390555b6108e3848484611372565b5060019392505050565b60025460ff1681565b60005433600160a060020a0390811691161461091157600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216600090815260086020526040812054158061099c5750600160a060020a03831660009081526008602052604081208054849290811061098557fe5b6000918252602090912001546001608060020a0316115b15610a4d57600554600160a060020a031615610a4557600554600654600160a060020a0390911690634ee2cd7e9085906109d7908690611564565b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610a2357600080fd5b6102c65a03f11515610a3457600080fd5b505050604051805190509050610831565b506000610831565b600160a060020a0383166000908152600860205260409020610a6f908361157c565b9050610831565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106c65780601f1061069b576101008083540402835291602001916106c6565b600080831515610aef574393505b600b546101009004600160a060020a0316635b7b72c130868a8a8a8960006040516020015260405160e060020a63ffffffff8916028152600160a060020a038716600482019081526024820187905260ff8516606483015282151560a483015260c0604483019081529091608481019060c40187818151815260200191508051906020019080838360005b83811015610b92578082015183820152602001610b7a565b50505050905090810190601f168015610bbf5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610bf5578082015183820152602001610bdd565b50505050905090810190601f168015610c225780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1515610c4657600080fd5b6102c65a03f11515610c5757600080fd5b5050506040518051915050600160a060020a038116633cebb8233360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515610cb057600080fd5b6102c65a03f11515610cc157600080fd5b50505080600160a060020a03167f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade8560405190815260200160405180910390a29695505050505050565b6000610d178243610940565b90505b919050565b600554600160a060020a031681565b600080548190819033600160a060020a03908116911614610d4e57600080fd5b610d5661083d565b915083820182901015610d6857600080fd5b610d7185610d0b565b905083810181901015610d8357600080fd5b610d90600a8584016116db565b600160a060020a0385166000908152600860205260409020610db4908286016116db565b84600160a060020a0316600060008051602061180f8339815191528660405190815260200160405180910390a3506001949350505050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106c65780601f1061069b576101008083540402835291602001916106c6565b600a546000901580610e8c575081600a6000815481101515610e7557fe5b6000918252602090912001546001608060020a0316115b15610f2e57600554600160a060020a031615610f2657600554600654600160a060020a039091169063981b24d090610ec5908590611564565b60006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610f0457600080fd5b6102c65a03f11515610f1557600080fd5b505050604051805190509050610d1a565b506000610d1a565b610f39600a8361157c565b9050610d1a565b600b5460009060ff161515610f5457600080fd5b610f5f338484611372565b50600192915050565b600b5460ff1681565b60065481565b6000610f8384846106ce565b1515610f8e57600080fd5b83600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561102657808201518382015260200161100e565b50505050905090810190601f1680156110535780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561107457600080fd5b6102c65a03f1151561108557600080fd5b5060019695505050505050565b600080548190819033600160a060020a039081169116146110b257600080fd5b6110ba61083d565b9150838210156110c957600080fd5b6110d285610d0b565b9050838110156110e157600080fd5b6110ee600a8584036116db565b600160a060020a0385166000908152600860205260409020611112908583036116db565b600085600160a060020a031660008051602061180f8339815191528660405190815260200160405180910390a3506001949350505050565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b60008054819033600160a060020a0390811691161461119357600080fd5b600160a060020a03831615156111e157600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156111dc57600080fd5b61131c565b82915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561123b57600080fd5b6102c65a03f1151561124c57600080fd5b505050604051805160008054919350600160a060020a03808616935063a9059cbb92169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156112bc57600080fd5b6102c65a03f115156112cd57600080fd5b50505060405180515050600054600160a060020a039081169084167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c8360405190815260200160405180910390a35b505050565b600b546101009004600160a060020a031681565b60005433600160a060020a0390811691161461135057600080fd5b600b805460ff1916911515919091179055565b600054600160a060020a031681565b6000808215156113b65783600160a060020a031685600160a060020a031660008051602061180f8339815191528560405190815260200160405180910390a361155d565b6006544390106113c557600080fd5b600160a060020a038416158015906113ef575030600160a060020a031684600160a060020a031614155b15156113fa57600080fd5b6114048543610940565b91508282101561141357600080fd5b60005461142890600160a060020a0316610603565b156114c35760008054600160a060020a031690634a393149908790879087906040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561149d57600080fd5b6102c65a03f115156114ae57600080fd5b5050506040518051905015156114c357600080fd5b600160a060020a03851660009081526008602052604090206114e7908484036116db565b6114f18443610940565b90508281018190101561150357600080fd5b600160a060020a0384166000908152600860205260409020611527908285016116db565b83600160a060020a031685600160a060020a031660008051602061180f8339815191528560405190815260200160405180910390a35b5050505050565b60008183106115735781611575565b825b9392505050565b60008060008085805490506000141561159857600093506116d2565b8554869060001981019081106115aa57fe5b6000918252602090912001546001608060020a03168510611607578554869060001981019081106115d757fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a031693506116d2565b85600081548110151561161657fe5b6000918252602090912001546001608060020a031685101561163b57600093506116d2565b8554600093506000190191505b8282111561169857600260018385010104905084868281548110151561166a57fe5b6000918252602090912001546001608060020a03161161168c57809250611693565b6001810391505b611648565b85838154811015156116a657fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a031693505b50505092915050565b815460009081901580611714575083544390859060001981019081106116fd57fe5b6000918252602090912001546001608060020a0316105b15611786578354849061172a82600183016117d1565b8154811061173457fe5b600091825260209091200180546001608060020a03858116700100000000000000000000000000000000024382166fffffffffffffffffffffffffffffffff19909316929092171617815591506117cb565b83548490600019810190811061179857fe5b600091825260209091200180546001608060020a0380861670010000000000000000000000000000000002911617815590505b50505050565b81548183558181151161131c5760008381526020902061131c91810190830161084b91905b8082111561180a57600081556001016117f6565b50905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582017c6348c9045529b5119eb74f681da4428cb91559fa7cbded95578c521fb40260029",
            "sourceMap": "1541:19840:1:-;;;;;;;;-1:-1:-1;;;1541:19840:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20192:10;;20181:22;;-1:-1:-1;;;;;20192:10:1;20181;:22::i;:::-;20173:31;;;;;;;;20238:10;;;-1:-1:-1;;;;;20238:10:1;;20222:40;;20269:9;;20280:10;;20222:69;;;;;;;;;;-1:-1:-1;;;20222:69:1;;;-1:-1:-1;;;;;20222:69:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20214:78;;;;;;;;1541:19840;1583:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9110:829:1;;;;;;;;;;;;-1:-1:-1;;;;;9110:829:1;;;;;;;;;;;;;;;;;;;;;;2724:25;;;;;;;;;;;;;;;;;;;;;;;;;;;11392:105;;;;;;;;;;;;5808:711;;;;;;;;;;-1:-1:-1;;;;;5808:711:1;;;;;;;;;;;;1663:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;456:116:0;;;;;;;;;;;;-1:-1:-1;;;;;456:116:0;;;11851:938:1;;;;;;;;;;;;-1:-1:-1;;;;;11851:938:1;;;;;1809:33;;;;;;;;;;;;14649:755;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14649:755:1;;-1:-1:-1;;14649:755:1;;;;;;;;;-1:-1:-1;14649:755:1;;-1:-1:-1;;;14649:755:1;;;;-1:-1:-1;;;;;14649:755:1;;;;;;;;;;;;;;;8577:134;;;;;;;;;;;;-1:-1:-1;;;;;8577:134:1;;;2423:30;;;;;;;;;;;;15735:576;;;;;;;;;;;;-1:-1:-1;;;;;15735:576:1;;;;;1744:20;;;;;;;;;;;;13002:910;;;;;;;;;;;;;;5271:187;;;;;;;;;;;;-1:-1:-1;;;;;5271:187:1;;;;;3303:28;;;;;;;;;;;;2610:31;;;;;;;;;;;;10926:342;;;;;;;;;;;;;-1:-1:-1;;;;;10926:342:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10926:342:1;;-1:-1:-1;10926:342:1;;-1:-1:-1;;;;;;10926:342:1;16541:500;;;;;;;;;;;;-1:-1:-1;;;;;16541:500:1;;;;;10258:151;;;;;;;;;;-1:-1:-1;;;;;10258:151:1;;;;;;;;;;20599:365;;;;;;;;;;;;-1:-1:-1;;;;;20599:365:1;;;3389:38;;;;;;;;;;;;17264:124;;;;;;;;;;;;;;;;242:25:0;;;;;;;;;;;;19503:222:1;19564:4;;-1:-1:-1;;;;;19603:10:1;;;19599:28;;;19622:5;19615:12;;;;19599:28;19680:5;19668:11;19660:26;;19717:1;19712:4;:6;19705:13;;19503:222;;;;;:::o;1583:18::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;9110:829::-;9210:16;;9178:12;;9210:16;;9202:25;;;;;;;;9550:12;;;9549:54;;-1:-1:-1;;;;;;9576:10:1;9568:19;;;;;;:7;:19;;;;;;;;:29;;;;;;;;;;:34;9549:54;9541:63;;;;;;;;9698:10;;9687:22;;-1:-1:-1;;;;;9698:10:1;9687;:22::i;:::-;9683:130;;;9749:10;;;-1:-1:-1;;;;;9749:10:1;;9733:37;;9771:10;;9783:8;;9793:7;;9733:68;;;;;;;;;;-1:-1:-1;;;9733:68:1;;;-1:-1:-1;;;;;9733:68:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9725:77;;;;;;;;-1:-1:-1;;;;;9831:10:1;9823:19;;;;;;:7;:19;;;;;;;;:29;;;;;;;;;;;;;;:39;;;9872;;9823;;9872;;;;;;;;;;;;;-1:-1:-1;9928:4:1;9110:829;;;;;:::o;2724:25::-;;;;:::o;11392:105::-;11440:4;11463:27;11477:12;11463:13;:27::i;:::-;11456:34;;11392:105;;:::o;5808:711::-;5896:12;6215:10;;6201;-1:-1:-1;;;;;6201:24:1;;;6215:10;;6201:24;6197:254;;6249:16;;;;6241:25;;;;;;;;-1:-1:-1;;;;;6351:14:1;;;;;;;:7;:14;;;;;;;;6366:10;6351:26;;;;;;;;;;:37;;;;6343:46;;;;;;-1:-1:-1;;;;;6403:14:1;;;;;;;:7;:14;;;;;;;;6418:10;6403:26;;;;;;;;;:37;;;;;;;6197:254;6460:31;6471:5;6478:3;6483:7;6460:10;:31::i;:::-;-1:-1:-1;6508:4:1;5808:711;;;;;:::o;1663:21::-;;;;;;:::o;456:116:0:-;219:10;;205;-1:-1:-1;;;;;205:24:0;;;219:10;;205:24;197:33;;;;;;538:10;:27;;-1:-1:-1;;538:27:0;-1:-1:-1;;;;;538:27:0;;;;;;;;;;456:116::o;11851:938:1:-;-1:-1:-1;;;;;12289:16:1;;11940:4;12289:16;;;:8;:16;;;;;:23;:28;;12288:92;;-1:-1:-1;;;;;;12335:16:1;;;;;;:8;:16;;;;;:19;;12367:12;;12335:16;:19;;;;;;;;;;;;;;;:29;-1:-1:-1;;;;;12335:29:1;:44;12288:92;12284:499;;;12408:11;;-1:-1:-1;;;;;12408:11:1;12400:25;12396:222;;12452:11;;12502:19;;-1:-1:-1;;;;;12452:11:1;;;;:23;;12476:6;;12484:38;;12488:12;;12484:3;:38::i;:::-;12452:71;;;;;;;;;;;-1:-1:-1;;;12452:71:1;;;-1:-1:-1;;;;;12452:71:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12445:78;;;;12396:222;-1:-1:-1;12602:1:1;12595:8;;12284:499;-1:-1:-1;;;;;12741:16:1;;;;;;:8;:16;;;;;12730:42;;12759:12;12730:10;:42::i;:::-;12723:49;;;;1809:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14649:755;14861:7;;14884:19;;14880:54;;;14922:12;14905:29;;14880:54;14969:12;;;;;-1:-1:-1;;;;;14969:12:1;:29;15012:4;15030:14;15058:15;15087:18;15119:17;15150;14969:212;;;;;;;;;;;-1:-1:-1;;;14969:212:1;;;-1:-1:-1;;;;;14969:212:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1;;;;;;;15192:27:1;;;15220:10;15192:39;;;;;-1:-1:-1;;;15192:39:1;;;-1:-1:-1;;;;;15192:39:1;;;;;;;;;;-1:-1:-1;15192:39:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;15311:50:1;;;15346:14;15311:50;;;;;;;;;;;;;;15386:10;14649:755;-1:-1:-1;;;;;;14649:755:1:o;8577:134::-;8637:15;8671:33;8683:6;8691:12;8671:11;:33::i;:::-;8664:40;;8577:134;;;;:::o;2423:30::-;;;-1:-1:-1;;;;;2423:30:1;;:::o;15735:576::-;15825:4;219:10:0;;15825:4:1;;;;205:10:0;-1:-1:-1;;;;;205:24:0;;;219:10;;205:24;197:33;;;;;;15863:13:1;:11;:13::i;:::-;15841:35;-1:-1:-1;15894:24:1;;;:42;;;;15886:51;;;;;;15994:17;16004:6;15994:9;:17::i;:::-;15969:42;-1:-1:-1;16029:27:1;;;:48;;;;16021:57;;;;;;16110:62;16127:18;16164:7;16147:14;:24;16110:16;:62::i;:::-;-1:-1:-1;;;;;16199:16:1;;;;;;:8;:16;;;;;16182:63;;16217:27;;;16182:16;:63::i;:::-;-1:-1:-1;;;;;16255:28:1;;16264:1;;;-1:-1:-1;;;;;;;;;16275:7:1;16255:28;;;;;;;;;;;;;;-1:-1:-1;16300:4:1;;15735:576;-1:-1:-1;;;;15735:576:1:o;1744:20::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13002:910;13441:18;:25;13068:4;;13441:30;;13440:96;;;13523:12;13489:18;13508:1;13489:21;;;;;;;;;;;;;;;;;;;:31;-1:-1:-1;;;;;13489:31:1;:46;13440:96;13436:470;;;13564:11;;-1:-1:-1;;;;;13564:11:1;13556:25;13552:183;;13608:11;;13652:19;;-1:-1:-1;;;;;13608:11:1;;;;:25;;13634:38;;13638:12;;13634:3;:38::i;:::-;13608:65;;;;;;;;;;;-1:-1:-1;;;13608:65:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13601:72;;;;13552:183;-1:-1:-1;13719:1:1;13712:8;;13436:470;13851:44;13862:18;13882:12;13851:10;:44::i;:::-;13844:51;;;;5271:187;5367:16;;5335:12;;5367:16;;5359:25;;;;;;;;5394:36;5405:10;5417:3;5422:7;5394:10;:36::i;:::-;-1:-1:-1;5447:4:1;5271:187;;;;:::o;3303:28::-;;;;;;:::o;2610:31::-;;;;:::o;10926:342::-;11024:12;11056:26;11064:8;11074:7;11056;:26::i;:::-;11048:35;;;;;;;;-1:-1:-1;;;;;11094:48:1;;;11156:10;11180:7;11201:4;11219:10;11094:145;;-1:-1:-1;;;11094:145:1;;;;;;-1:-1:-1;;;;;11094:145:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1;11257:4:1;;10926:342;-1:-1:-1;;;;;;10926:342:1:o;16541:500::-;16630:4;219:10:0;;16630:4:1;;;;205:10:0;-1:-1:-1;;;;;205:24:0;;;219:10;;205:24;197:33;;;;;;16668:13:1;:11;:13::i;:::-;16646:35;-1:-1:-1;16699:25:1;;;;16691:34;;;;;;16762:17;16772:6;16762:9;:17::i;:::-;16735:44;-1:-1:-1;16797:30:1;;;;16789:39;;;;;;16838:62;16855:18;16892:7;16875:14;:24;16838:16;:62::i;:::-;-1:-1:-1;;;;;16927:16:1;;;;;;:8;:16;;;;;16910:65;;16945:29;;;16910:16;:65::i;:::-;17002:1;-1:-1:-1;;;;;16985:28:1;;17002:1;;-1:-1:-1;;;;;;;;;17005:7:1;16985:28;;;;;;;;;;;;;;-1:-1:-1;17030:4:1;;16541:500;-1:-1:-1;;;;16541:500:1:o;10258:151::-;-1:-1:-1;;;;;10377:15:1;;;10341:17;10377:15;;;:7;:15;;;;;;;;:25;;;;;;;;;;;;;10258:151::o;20599:365::-;20775:17;219:10:0;;20775:17:1;;205:10:0;-1:-1:-1;;;;;205:24:0;;;219:10;;205:24;197:33;;;;;;-1:-1:-1;;;;;20672:13:1;;;20668:97;;;20701:10;;-1:-1:-1;;;;;20701:10:1;;;;20721:4;:12;;20701:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20748:7;;20668:97;20807:6;;-1:-1:-1;;;;;;20839:15:1;;;20855:4;20839:21;;;;;;;;;;;-1:-1:-1;;;20839:21:1;;;-1:-1:-1;;;;;20839:21:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20885:10;;;20839:21;;-1:-1:-1;;;;;;20870:14:1;;;;-1:-1:-1;20870:14:1;;20885:10;;20839:21;;20870:35;;;;;;;;;;-1:-1:-1;;;20870:35:1;;;-1:-1:-1;;;;;20870:35:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;20937:10:1;;-1:-1:-1;;;;;20937:10:1;;;;20915:42;;;20949:7;20915:42;;;;;;;;;;;;;;232:1:0;20599:365:1;;;:::o;3389:38::-;;;;;;-1:-1:-1;;;;;3389:38:1;;:::o;17264:124::-;219:10:0;;205;-1:-1:-1;;;;;205:24:0;;;219:10;;205:24;197:33;;;;;;17345:16:1;:36;;-1:-1:-1;;17345:36:1;;;;;;;;;;17264:124::o;242:25:0:-;;;-1:-1:-1;;;;;242:25:0;;:::o;6898:1544:1:-;7467:23;;6992:12;;6988:158;;;-1:-1:-1;;;;;7023:29:1;;;;;;-1:-1:-1;;;;;;;;;;;7044:7:1;7023:29;;;;;;;;;;;;;;7126:7;;6988:158;7167:19;;7189:12;7167:34;;7159:43;;;;;;-1:-1:-1;;;;;7297:8:1;;;;;;7296:36;;-1:-1:-1;7326:4:1;-1:-1:-1;;;;;7311:20:1;;;;;;;;7296:36;7288:45;;;;;;;;7493:32;7505:5;7512:12;7493:11;:32::i;:::-;7467:58;-1:-1:-1;7547:30:1;;;;7539:39;;;;;;7665:10;;7654:22;;-1:-1:-1;;;;;7665:10:1;7654;:22::i;:::-;7650:127;;;7719:10;;;-1:-1:-1;;;;;7719:10:1;;7703:38;;7742:5;;7749:3;;7754:7;;7703:59;;;;;;;;;;-1:-1:-1;;;7703:59:1;;;-1:-1:-1;;;;;7703:59:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7695:68;;;;;;;;-1:-1:-1;;;;;7921:15:1;;;;;;:8;:15;;;;;7904:64;;7938:29;;;7904:16;:64::i;:::-;8121:30;8133:3;8138:12;8121:11;:30::i;:::-;8097:54;-1:-1:-1;8172:27:1;;;:48;;;;8164:57;;;;;;-1:-1:-1;;;;;8273:13:1;;;;;;:8;:13;;;;;8256:60;;8288:27;;;8256:16;:60::i;:::-;-1:-1:-1;;;;;8405:29:1;;;;;;-1:-1:-1;;;;;;;;;;;8426:7:1;8405:29;;;;;;;;;;;;;;6898:1544;;;;;;:::o;19797:95::-;19849:4;19876:1;19872;:5;:13;;19884:1;19872:13;;;19880:1;19872:13;19865:20;19797:95;-1:-1:-1;;;19797:95:1:o;17762:765::-;17861:4;18202:8;18224;18297;17881:11;:18;;;;17903:1;17881:23;17877:37;;;17913:1;17906:8;;;;17877:37;17992:18;;;;-1:-1:-1;;17992:20:1;;;17980:33;;;;;;;;;;;;;;;:43;-1:-1:-1;;;;;17980:43:1;17970:53;;17966:117;;18056:18;;;;-1:-1:-1;;18056:20:1;;;18044:33;;;;;;;;;;;;;;;:39;;;;-1:-1:-1;;;;;18044:39:1;;-1:-1:-1;18037:46:1;;17966:117;18106:11;18118:1;18106:14;;;;;;;;;;;;;;;;;;;:24;-1:-1:-1;;;;;18106:24:1;18097:33;;18093:47;;;18139:1;18132:8;;;;18093:47;18235:18;;18213:1;;-1:-1:-1;;;18235:20:1;;-1:-1:-1;18265:217:1;18278:3;18272;:9;18265:217;;;18325:1;18321;18309:9;;;:13;18308:18;18297:29;;18372:6;18344:11;18356:3;18344:16;;;;;;;;;;;;;;;;;;;:26;-1:-1:-1;;;;;18344:26:1;:34;18340:132;;18404:3;18398:9;;18340:132;;;18456:1;18452:3;:5;18446:11;;18340:132;18265:217;;;18498:11;18510:3;18498:16;;;;;;;;;;;;;;;;;;;:22;;;;-1:-1:-1;;;;;18498:22:1;;-1:-1:-1;17762:765:1;;;;;;;;:::o;18745:587::-;18848:18;;18964:32;;;;18848:23;;18847:98;;-1:-1:-1;18897:18:1;;18932:12;;18897:18;;-1:-1:-1;;18897:21:1;;;18885:34;;;;;;;;;;;;;;;:44;-1:-1:-1;;;;;18885:44:1;:59;18847:98;18843:483;;;19012:20;;18999:11;;19012:20;18999:11;19012:20;;;;:::i;:::-;18999:35;;;;;;;;;;;;;;;;;19051:48;;-1:-1:-1;;19051:48:1;19086:12;-1:-1:-1;;;;;19051:48:1;;;;;;;19116:37;;;;;-1:-1:-1;19116:37:1;;;;18999:35;-1:-1:-1;18843:483:1;;;19237:18;;;;-1:-1:-1;;19237:20:1;;;19225:33;;;;;;;;;;;;;;;19275:37;;-1:-1:-1;;;;;19275:37:1;;;;;;-1:-1:-1;19275:37:1;;;;19225:33;-1:-1:-1;18843:483:1;18745:587;;;;:::o;1541:19840::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "1246800",
              "executionCost": "infinite",
              "totalCost": "infinite"
            },
            "external": {
              "": "infinite",
              "allowance(address,address)": "infinite",
              "approve(address,uint256)": "infinite",
              "approveAndCall(address,uint256,bytes)": "infinite",
              "balanceOf(address)": "infinite",
              "balanceOfAt(address,uint256)": "infinite",
              "changeController(address)": "infinite",
              "claimTokens(address)": "infinite",
              "controller()": "infinite",
              "createCloneToken(string,uint8,string,uint256,bool)": "infinite",
              "creationBlock()": "infinite",
              "decimals()": "infinite",
              "destroyTokens(address,uint256)": "infinite",
              "enableTransfers(bool)": "infinite",
              "generateTokens(address,uint256)": "infinite",
              "name()": "infinite",
              "parentSnapShotBlock()": "infinite",
              "parentToken()": "infinite",
              "symbol()": "infinite",
              "tokenFactory()": "infinite",
              "totalSupply()": "infinite",
              "totalSupplyAt(uint256)": "infinite",
              "transfer(address,uint256)": "infinite",
              "transferFrom(address,address,uint256)": "infinite",
              "transfersEnabled()": "infinite",
              "version()": "infinite"
            },
            "internal": {
              "doTransfer(address,address,uint256)": "infinite",
              "getValueAt(struct MiniMeToken.Checkpoint storage ref[] storage pointer,uint256)": "infinite",
              "isContract(address)": "846",
              "min(uint256,uint256)": "61",
              "updateValueAtNow(struct MiniMeToken.Checkpoint storage ref[] storage pointer,uint256)": "infinite"
            }
          },
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "approveAndCall(address,uint256,bytes)": "cae9ca51",
            "balanceOf(address)": "70a08231",
            "balanceOfAt(address,uint256)": "4ee2cd7e",
            "changeController(address)": "3cebb823",
            "claimTokens(address)": "df8de3e7",
            "controller()": "f77c4791",
            "createCloneToken(string,uint8,string,uint256,bool)": "6638c087",
            "creationBlock()": "17634514",
            "decimals()": "313ce567",
            "destroyTokens(address,uint256)": "d3ce77fe",
            "enableTransfers(bool)": "f41e60c5",
            "generateTokens(address,uint256)": "827f32c0",
            "name()": "06fdde03",
            "parentSnapShotBlock()": "c5bcc4f1",
            "parentToken()": "80a54001",
            "symbol()": "95d89b41",
            "tokenFactory()": "e77772fe",
            "totalSupply()": "18160ddd",
            "totalSupplyAt(uint256)": "981b24d0",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd",
            "transfersEnabled()": "bef97c87",
            "version()": "54fd4d50"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cloneTokenName\",\"type\":\"string\"},{\"name\":\"_cloneDecimalUnits\",\"type\":\"uint8\"},{\"name\":\"_cloneTokenSymbol\",\"type\":\"string\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentSnapShotBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"name\":\"_parentToken\",\"type\":\"address\"},{\"name\":\"_parentSnapShotBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cloneToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"NewCloneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"This function makes it easy to read the `allowed[]` map\",\"params\":{\"_owner\":\"The address of the account that owns the token\",\"_spender\":\"The address of the account able to transfer the tokens\"},\"return\":\"Amount of remaining tokens of _owner that _spender is allowed  to spend\"},\"approve(address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to be approved for transfer\",\"_spender\":\"The address of the account able to transfer the tokens\"},\"return\":\"True if the approval was successful\"},\"approveAndCall(address,uint256,bytes)\":{\"params\":{\"_amount\":\"The amount of tokens to be approved for transfer\",\"_spender\":\"The address of the contract able to transfer the tokens\"},\"return\":\"True if the function call was successful\"},\"balanceOf(address)\":{\"params\":{\"_owner\":\"The address that's balance is being requested\"},\"return\":\"The balance of `_owner` at the current block\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the balance of `_owner` at a specific `_blockNumber`\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried\",\"_owner\":\"The address from which the balance will be retrieved\"},\"return\":\"The balance at `_blockNumber`\"},\"changeController(address)\":{\"params\":{\"_newController\":\"The new controller of the contract\"}},\"claimTokens(address)\":{\"params\":{\"_token\":\"The address of the token contract that you want to recover  set to 0 in case you want to extract ether.\"}},\"createCloneToken(string,uint8,string,uint256,bool)\":{\"params\":{\"_cloneDecimalUnits\":\"Number of decimals of the smallest unit\",\"_cloneTokenName\":\"Name of the clone token\",\"_cloneTokenSymbol\":\"Symbol of the clone token\",\"_snapshotBlock\":\"Block when the distribution of the parent token is  copied to set the initial distribution of the new clone token;  if the block is zero than the actual block, the current block is used\",\"_transfersEnabled\":\"True if transfers are allowed in the clone\"},\"return\":\"The address of the new MiniMeToken Contract\"},\"destroyTokens(address,uint256)\":{\"params\":{\"_amount\":\"The quantity of tokens to burn\",\"_owner\":\"The address that will lose the tokens\"},\"return\":\"True if the tokens are burned correctly\"},\"enableTransfers(bool)\":{\"params\":{\"_transfersEnabled\":\"True if transfers are allowed in the clone\"}},\"generateTokens(address,uint256)\":{\"params\":{\"_amount\":\"The quantity of tokens generated\",\"_owner\":\"The address that will be assigned the new tokens\"},\"return\":\"True if the tokens are generated correctly\"},\"totalSupply()\":{\"details\":\"This function makes it easy to get the total number of tokens\",\"return\":\"The total number of tokens\"},\"totalSupplyAt(uint256)\":{\"params\":{\"_blockNumber\":\"The block number when the totalSupply is queried\"},\"return\":\"The total amount of tokens at `_blockNumber`\"},\"transfer(address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to be transferred\",\"_to\":\"The address of the recipient\"},\"return\":\"Whether the transfer was successful or not\"},\"transferFrom(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to be transferred\",\"_from\":\"The address holding the tokens being transferred\",\"_to\":\"The address of the recipient\"},\"return\":\"True if the transfer was successful\"}}},\"userdoc\":{\"methods\":{\"approve(address,uint256)\":{\"notice\":\"`msg.sender` approves `_spender` to spend `_amount` tokens on  its behalf. This is a modified version of the ERC20 approve function  to be a little bit safer\"},\"approveAndCall(address,uint256,bytes)\":{\"notice\":\"`msg.sender` approves `_spender` to send `_amount` tokens on  its behalf, and then a function is triggered in the contract that is  being approved, `_spender`. This allows users to use their tokens to  interact with contracts in one function call instead of two\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"/////////////\"},\"changeController(address)\":{\"notice\":\"Changes the controller of the contract\"},\"claimTokens(address)\":{\"notice\":\"///////This method can be used by the controller to extract mistakenly  sent tokens to this contract.\"},\"createCloneToken(string,uint8,string,uint256,bool)\":{\"notice\":\"/////////////Creates a new clone token with the initial distribution being  this token at `_snapshotBlock`\"},\"destroyTokens(address,uint256)\":{\"notice\":\"Burns `_amount` tokens from `_owner`\"},\"enableTransfers(bool)\":{\"notice\":\"/////////////Enables token holders to transfer their tokens freely if true\"},\"generateTokens(address,uint256)\":{\"notice\":\"/////////////Generates `_amount` tokens that are assigned to `_owner`\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Total amount of tokens at a specific `_blockNumber`.\"},\"transfer(address,uint256)\":{\"notice\":\"////////////////Send `_amount` tokens to `_to` from `msg.sender`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Send `_amount` tokens to `_to` from `_from` on the condition it  is approved by `_from`\"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/MiniMeToken.sol\":\"MiniMeToken\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":./Controlled.sol=./contracts/Controlled.sol\",\":./TokenController.sol=./contracts/TokenController.sol\",\":MiniMeToken.sol=./contracts/MiniMeToken.sol\"]},\"sources\":{\"./contracts/Controlled.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController { require(msg.sender == controller); _; }\\n\\n    address public controller;\\n\\n    function Controlled() public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) public onlyController {\\n        controller = _newController;\\n    }\\n}\\n\",\"keccak256\":\"0x770798704985a4588762ea932b913bc1df01b4625ab86c5a7278883bbde44b78\"},\"./contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./TokenController.sol\\\";\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct  Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        address _tokenFactory,\\n        address _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public {\\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = MiniMeToken(_parentToken);\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        doTransfer(msg.sender, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount\\n    ) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            require(allowed[_from][msg.sender] >= _amount);\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        doTransfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount\\n    ) internal {\\n\\n           if (_amount == 0) {\\n               Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\\n               return;\\n           }\\n\\n           require(parentSnapShotBlock < block.number);\\n\\n           // Do not allow transfer to 0x0 or the token contract itself\\n           require((_to != 0) && (_to != address(this)));\\n\\n           // If the amount being transfered is more than the balance of the\\n           //  account the transfer throws\\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\\n\\n           require(previousBalanceFrom >= _amount);\\n\\n           // Alerts the token controller of the transfer\\n           if (isContract(controller)) {\\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\\n           }\\n\\n           // First update the balance array with the new value for the address\\n           //  sending the tokens\\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n\\n           // Then update the balance array with the new value for the address\\n           //  receiving the tokens\\n           var previousBalanceTo = balanceOfAt(_to, block.number);\\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n\\n           // An event to make the transfer easy to find on the blockchain\\n           Transfer(_from, _to, _amount);\\n\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender\\n    ) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\\n    ) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        ApproveAndCallFallBack(_spender).receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\\n        returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0)\\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0)\\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n        ) public returns(address) {\\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            _snapshotBlock,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), _snapshotBlock);\\n        return address(cloneToken);\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount\\n    ) public onlyController returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount\\n    ) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) public onlyController {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\\n    ) constant internal returns (uint) {\\n        if (checkpoints.length == 0) return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock) return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\\n    ) internal  {\\n        if ((checkpoints.length == 0)\\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n               newCheckPoint.fromBlock =  uint128(block.number);\\n               newCheckPoint.value = uint128(_value);\\n           } else {\\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n               oldCheckPoint.value = uint128(_value);\\n           }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0) return false;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () public payable {\\n        require(isContract(controller));\\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) public onlyController {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        address _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken) {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\\n\",\"keccak256\":\"0x5e98063ce7b6a58d41e2d7dfbe651527e2cfaf255f0fe82538783c121259e77f\"},\"./contracts/TokenController.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/// @dev The token controller contract must implement these functions\\ncontract TokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) public payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) public\\n        returns(bool);\\n}\\n\",\"keccak256\":\"0xf8bf7de20c0412ab90ec43c1432508a8316e17bd246adffa737e0d779413ff5e\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "approve(address,uint256)": {
              "notice": "`msg.sender` approves `_spender` to spend `_amount` tokens on  its behalf. This is a modified version of the ERC20 approve function  to be a little bit safer"
            },
            "approveAndCall(address,uint256,bytes)": {
              "notice": "`msg.sender` approves `_spender` to send `_amount` tokens on  its behalf, and then a function is triggered in the contract that is  being approved, `_spender`. This allows users to use their tokens to  interact with contracts in one function call instead of two"
            },
            "balanceOfAt(address,uint256)": {
              "notice": "/////////////"
            },
            "changeController(address)": {
              "notice": "Changes the controller of the contract"
            },
            "claimTokens(address)": {
              "notice": "///////This method can be used by the controller to extract mistakenly  sent tokens to this contract."
            },
            "createCloneToken(string,uint8,string,uint256,bool)": {
              "notice": "/////////////Creates a new clone token with the initial distribution being  this token at `_snapshotBlock`"
            },
            "destroyTokens(address,uint256)": {
              "notice": "Burns `_amount` tokens from `_owner`"
            },
            "enableTransfers(bool)": {
              "notice": "/////////////Enables token holders to transfer their tokens freely if true"
            },
            "generateTokens(address,uint256)": {
              "notice": "/////////////Generates `_amount` tokens that are assigned to `_owner`"
            },
            "totalSupplyAt(uint256)": {
              "notice": "Total amount of tokens at a specific `_blockNumber`."
            },
            "transfer(address,uint256)": {
              "notice": "////////////////Send `_amount` tokens to `_to` from `msg.sender`"
            },
            "transferFrom(address,address,uint256)": {
              "notice": "Send `_amount` tokens to `_to` from `_from` on the condition it  is approved by `_from`"
            }
          }
        }
      },
      "MiniMeTokenFactory": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "_parentToken",
                "type": "address"
              },
              {
                "name": "_snapshotBlock",
                "type": "uint256"
              },
              {
                "name": "_tokenName",
                "type": "string"
              },
              {
                "name": "_decimalUnits",
                "type": "uint8"
              },
              {
                "name": "_tokenSymbol",
                "type": "string"
              },
              {
                "name": "_transfersEnabled",
                "type": "bool"
              }
            ],
            "name": "createCloneToken",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {
            "createCloneToken(address,uint256,string,uint8,string,bool)": {
              "params": {
                "_decimalUnits": "Number of decimals of the new token",
                "_parentToken": "Address of the token being cloned",
                "_snapshotBlock": "Block of the parent token that will  determine the initial distribution of the clone token",
                "_tokenName": "Name of the new token",
                "_tokenSymbol": "Token Symbol for the new token",
                "_transfersEnabled": "If true, tokens will be able to be transferred"
              },
              "return": "The address of the new token contract"
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": "21610:1241:1:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100405763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635b7b72c18114610045575b600080fd5b341561005057600080fd5b6101096004803573ffffffffffffffffffffffffffffffffffffffff169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803560ff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505050509135151591506101329050565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60008030888888888888610144610313565b73ffffffffffffffffffffffffffffffffffffffff8089168252871660208201526040810186905260ff8416608082015281151560c082015260e0606082018181529060a0830190830187818151815260200191508051906020019080838360005b838110156101be5780820151838201526020016101a6565b50505050905090810190601f1680156101eb5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610221578082015183820152602001610209565b50505050905090810190601f16801561024e5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051809103906000f080151561027057600080fd5b90508073ffffffffffffffffffffffffffffffffffffffff16633cebb823336040517c010000000000000000000000000000000000000000000000000000000063ffffffff841602815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401600060405180830381600087803b15156102f357600080fd5b6102c65a03f1151561030457600080fd5b50919998505050505050505050565b604051611a7180610324833901905600606060405260408051908101604052600781527f4d4d545f302e3200000000000000000000000000000000000000000000000000602082015260049080516200004d92916020019062000162565b5034156200005a57600080fd5b60405162001a7138038062001a71833981016040528080519190602001805191906020018051919060200180518201919060200180519190602001805182019190602001805160008054600160a060020a03338116600160a060020a031990921691909117909155600b8054918b166101000261010060a860020a0319909216919091179055915060019050848051620000f992916020019062000162565b506002805460ff191660ff851617905560038280516200011e92916020019062000162565b5060058054600160a060020a031916600160a060020a039790971696909617909555505050600655600b805460ff1916911515919091179055504360075562000207565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001a557805160ff1916838001178555620001d5565b82800160010185558215620001d5579182015b82811115620001d5578251825591602001919060010190620001b8565b50620001e3929150620001e7565b5090565b6200020491905b80821115620001e35760008155600101620001ee565b90565b61185a80620002176000396000f30060606040526004361061012f5763ffffffff60e060020a60003504166306fdde0381146101d4578063095ea7b31461025e578063176345141461029457806318160ddd146102b957806323b872dd146102cc578063313ce567146102f45780633cebb8231461031d5780634ee2cd7e1461033c57806354fd4d501461035e5780636638c0871461037157806370a082311461043557806380a5400114610454578063827f32c01461046757806395d89b4114610489578063981b24d01461049c578063a9059cbb146104b2578063bef97c87146104d4578063c5bcc4f1146104e7578063cae9ca51146104fa578063d3ce77fe1461055f578063dd62ed3e14610581578063df8de3e7146105a6578063e77772fe146105c5578063f41e60c5146105d8578063f77c4791146105f0575b60005461014490600160a060020a0316610603565b151561014f57600080fd5b60008054600160a060020a03169063f48c305490349033906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390911660048201526024016020604051808303818588803b15156101ab57600080fd5b6125ee5a03f115156101bc57600080fd5b505050506040518051905015156101d257600080fd5b005b34156101df57600080fd5b6101e7610630565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561022357808201518382015260200161020b565b50505050905090810190601f1680156102505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026957600080fd5b610280600160a060020a03600435166024356106ce565b604051901515815260200160405180910390f35b341561029f57600080fd5b6102a7610837565b60405190815260200160405180910390f35b34156102c457600080fd5b6102a761083d565b34156102d757600080fd5b610280600160a060020a036004358116906024351660443561084e565b34156102ff57600080fd5b6103076108ed565b60405160ff909116815260200160405180910390f35b341561032857600080fd5b6101d2600160a060020a03600435166108f6565b341561034757600080fd5b6102a7600160a060020a0360043516602435610940565b341561036957600080fd5b6101e7610a76565b341561037c57600080fd5b61041960046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803560ff1690602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650508435946020013515159350610ae192505050565b604051600160a060020a03909116815260200160405180910390f35b341561044057600080fd5b6102a7600160a060020a0360043516610d0b565b341561045f57600080fd5b610419610d1f565b341561047257600080fd5b610280600160a060020a0360043516602435610d2e565b341561049457600080fd5b6101e7610dec565b34156104a757600080fd5b6102a7600435610e57565b34156104bd57600080fd5b610280600160a060020a0360043516602435610f40565b34156104df57600080fd5b610280610f68565b34156104f257600080fd5b6102a7610f71565b341561050557600080fd5b61028060048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610f7795505050505050565b341561056a57600080fd5b610280600160a060020a0360043516602435611092565b341561058c57600080fd5b6102a7600160a060020a036004358116906024351661114a565b34156105b157600080fd5b6101d2600160a060020a0360043516611175565b34156105d057600080fd5b610419611321565b34156105e357600080fd5b6101d26004351515611335565b34156105fb57600080fd5b610419611363565b600080600160a060020a038316151561061f576000915061062a565b823b90506000811191505b50919050565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106c65780601f1061069b576101008083540402835291602001916106c6565b820191906000526020600020905b8154815290600101906020018083116106a957829003601f168201915b505050505081565b600b5460009060ff1615156106e257600080fd5b8115806107125750600160a060020a03338116600090815260096020908152604080832093871683529290522054155b151561071d57600080fd5b60005461073290600160a060020a0316610603565b156107cd5760008054600160a060020a03169063da682aeb903390869086906040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156107a757600080fd5b6102c65a03f115156107b857600080fd5b5050506040518051905015156107cd57600080fd5b600160a060020a03338116600081815260096020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60075481565b600061084843610e57565b90505b90565b6000805433600160a060020a039081169116146108d857600b5460ff16151561087657600080fd5b600160a060020a0380851660009081526009602090815260408083203390941683529290522054829010156108aa57600080fd5b600160a060020a03808516600090815260096020908152604080832033909416835292905220805483900390555b6108e3848484611372565b5060019392505050565b60025460ff1681565b60005433600160a060020a0390811691161461091157600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216600090815260086020526040812054158061099c5750600160a060020a03831660009081526008602052604081208054849290811061098557fe5b6000918252602090912001546001608060020a0316115b15610a4d57600554600160a060020a031615610a4557600554600654600160a060020a0390911690634ee2cd7e9085906109d7908690611564565b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610a2357600080fd5b6102c65a03f11515610a3457600080fd5b505050604051805190509050610831565b506000610831565b600160a060020a0383166000908152600860205260409020610a6f908361157c565b9050610831565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106c65780601f1061069b576101008083540402835291602001916106c6565b600080831515610aef574393505b600b546101009004600160a060020a0316635b7b72c130868a8a8a8960006040516020015260405160e060020a63ffffffff8916028152600160a060020a038716600482019081526024820187905260ff8516606483015282151560a483015260c0604483019081529091608481019060c40187818151815260200191508051906020019080838360005b83811015610b92578082015183820152602001610b7a565b50505050905090810190601f168015610bbf5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610bf5578082015183820152602001610bdd565b50505050905090810190601f168015610c225780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1515610c4657600080fd5b6102c65a03f11515610c5757600080fd5b5050506040518051915050600160a060020a038116633cebb8233360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515610cb057600080fd5b6102c65a03f11515610cc157600080fd5b50505080600160a060020a03167f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade8560405190815260200160405180910390a29695505050505050565b6000610d178243610940565b90505b919050565b600554600160a060020a031681565b600080548190819033600160a060020a03908116911614610d4e57600080fd5b610d5661083d565b915083820182901015610d6857600080fd5b610d7185610d0b565b905083810181901015610d8357600080fd5b610d90600a8584016116db565b600160a060020a0385166000908152600860205260409020610db4908286016116db565b84600160a060020a0316600060008051602061180f8339815191528660405190815260200160405180910390a3506001949350505050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106c65780601f1061069b576101008083540402835291602001916106c6565b600a546000901580610e8c575081600a6000815481101515610e7557fe5b6000918252602090912001546001608060020a0316115b15610f2e57600554600160a060020a031615610f2657600554600654600160a060020a039091169063981b24d090610ec5908590611564565b60006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610f0457600080fd5b6102c65a03f11515610f1557600080fd5b505050604051805190509050610d1a565b506000610d1a565b610f39600a8361157c565b9050610d1a565b600b5460009060ff161515610f5457600080fd5b610f5f338484611372565b50600192915050565b600b5460ff1681565b60065481565b6000610f8384846106ce565b1515610f8e57600080fd5b83600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561102657808201518382015260200161100e565b50505050905090810190601f1680156110535780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561107457600080fd5b6102c65a03f1151561108557600080fd5b5060019695505050505050565b600080548190819033600160a060020a039081169116146110b257600080fd5b6110ba61083d565b9150838210156110c957600080fd5b6110d285610d0b565b9050838110156110e157600080fd5b6110ee600a8584036116db565b600160a060020a0385166000908152600860205260409020611112908583036116db565b600085600160a060020a031660008051602061180f8339815191528660405190815260200160405180910390a3506001949350505050565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b60008054819033600160a060020a0390811691161461119357600080fd5b600160a060020a03831615156111e157600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156111dc57600080fd5b61131c565b82915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561123b57600080fd5b6102c65a03f1151561124c57600080fd5b505050604051805160008054919350600160a060020a03808616935063a9059cbb92169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156112bc57600080fd5b6102c65a03f115156112cd57600080fd5b50505060405180515050600054600160a060020a039081169084167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c8360405190815260200160405180910390a35b505050565b600b546101009004600160a060020a031681565b60005433600160a060020a0390811691161461135057600080fd5b600b805460ff1916911515919091179055565b600054600160a060020a031681565b6000808215156113b65783600160a060020a031685600160a060020a031660008051602061180f8339815191528560405190815260200160405180910390a361155d565b6006544390106113c557600080fd5b600160a060020a038416158015906113ef575030600160a060020a031684600160a060020a031614155b15156113fa57600080fd5b6114048543610940565b91508282101561141357600080fd5b60005461142890600160a060020a0316610603565b156114c35760008054600160a060020a031690634a393149908790879087906040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561149d57600080fd5b6102c65a03f115156114ae57600080fd5b5050506040518051905015156114c357600080fd5b600160a060020a03851660009081526008602052604090206114e7908484036116db565b6114f18443610940565b90508281018190101561150357600080fd5b600160a060020a0384166000908152600860205260409020611527908285016116db565b83600160a060020a031685600160a060020a031660008051602061180f8339815191528560405190815260200160405180910390a35b5050505050565b60008183106115735781611575565b825b9392505050565b60008060008085805490506000141561159857600093506116d2565b8554869060001981019081106115aa57fe5b6000918252602090912001546001608060020a03168510611607578554869060001981019081106115d757fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a031693506116d2565b85600081548110151561161657fe5b6000918252602090912001546001608060020a031685101561163b57600093506116d2565b8554600093506000190191505b8282111561169857600260018385010104905084868281548110151561166a57fe5b6000918252602090912001546001608060020a03161161168c57809250611693565b6001810391505b611648565b85838154811015156116a657fe5b60009182526020909120015470010000000000000000000000000000000090046001608060020a031693505b50505092915050565b815460009081901580611714575083544390859060001981019081106116fd57fe5b6000918252602090912001546001608060020a0316105b15611786578354849061172a82600183016117d1565b8154811061173457fe5b600091825260209091200180546001608060020a03858116700100000000000000000000000000000000024382166fffffffffffffffffffffffffffffffff19909316929092171617815591506117cb565b83548490600019810190811061179857fe5b600091825260209091200180546001608060020a0380861670010000000000000000000000000000000002911617815590505b50505050565b81548183558181151161131c5760008381526020902061131c91810190830161084b91905b8082111561180a57600081556001016117f6565b50905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582017c6348c9045529b5119eb74f681da4428cb91559fa7cbded95578c521fb40260029a165627a7a72305820af3ca05f27a325da8a38c59e4186a5664e74bc8073d5f009a41719c2dffa54e50029",
            "sourceMap": "21610:1241:1:-;;;;;;;;;;;;;;;;;;;;;;;22290:559;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;22290:559:1;;-1:-1:-1;;;;22290:559:1;;;;;-1:-1:-1;22290:559:1;;-1:-1:-1;22290:559:1;;;;;;;;;;;;;;;;;;;;22514:11;22537:20;22589:4;22607:12;22633:14;22661:10;22685:13;22712:12;22738:17;22560:209;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22537:232:1;;22780:8;:25;;;22806:10;22780:37;;;;;;;;;;;;;;;;;;;-1:-1:-1;22780:37:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;22834:8:1;;22290:559;-1:-1:-1;;;;;;;;;22290:559:1:o;21610:1241::-;;;;;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "1523200",
              "executionCost": "1584",
              "totalCost": "1524784"
            },
            "external": {
              "createCloneToken(address,uint256,string,uint8,string,bool)": "infinite"
            }
          },
          "methodIdentifiers": {
            "createCloneToken(address,uint256,string,uint8,string,bool)": "5b7b72c1"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_parentToken\",\"type\":\"address\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"createCloneToken(address,uint256,string,uint8,string,bool)\":{\"params\":{\"_decimalUnits\":\"Number of decimals of the new token\",\"_parentToken\":\"Address of the token being cloned\",\"_snapshotBlock\":\"Block of the parent token that will  determine the initial distribution of the clone token\",\"_tokenName\":\"Name of the new token\",\"_tokenSymbol\":\"Token Symbol for the new token\",\"_transfersEnabled\":\"If true, tokens will be able to be transferred\"},\"return\":\"The address of the new token contract\"}}},\"userdoc\":{\"methods\":{\"createCloneToken(address,uint256,string,uint8,string,bool)\":{\"notice\":\"Update the DApp by creating a new token with new functionalities  the msg.sender becomes the controller of this clone token\"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/MiniMeToken.sol\":\"MiniMeTokenFactory\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":./Controlled.sol=./contracts/Controlled.sol\",\":./TokenController.sol=./contracts/TokenController.sol\",\":MiniMeToken.sol=./contracts/MiniMeToken.sol\"]},\"sources\":{\"./contracts/Controlled.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController { require(msg.sender == controller); _; }\\n\\n    address public controller;\\n\\n    function Controlled() public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) public onlyController {\\n        controller = _newController;\\n    }\\n}\\n\",\"keccak256\":\"0x770798704985a4588762ea932b913bc1df01b4625ab86c5a7278883bbde44b78\"},\"./contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./TokenController.sol\\\";\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct  Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        address _tokenFactory,\\n        address _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public {\\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = MiniMeToken(_parentToken);\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        doTransfer(msg.sender, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount\\n    ) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            require(allowed[_from][msg.sender] >= _amount);\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        doTransfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount\\n    ) internal {\\n\\n           if (_amount == 0) {\\n               Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\\n               return;\\n           }\\n\\n           require(parentSnapShotBlock < block.number);\\n\\n           // Do not allow transfer to 0x0 or the token contract itself\\n           require((_to != 0) && (_to != address(this)));\\n\\n           // If the amount being transfered is more than the balance of the\\n           //  account the transfer throws\\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\\n\\n           require(previousBalanceFrom >= _amount);\\n\\n           // Alerts the token controller of the transfer\\n           if (isContract(controller)) {\\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\\n           }\\n\\n           // First update the balance array with the new value for the address\\n           //  sending the tokens\\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n\\n           // Then update the balance array with the new value for the address\\n           //  receiving the tokens\\n           var previousBalanceTo = balanceOfAt(_to, block.number);\\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n\\n           // An event to make the transfer easy to find on the blockchain\\n           Transfer(_from, _to, _amount);\\n\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender\\n    ) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\\n    ) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        ApproveAndCallFallBack(_spender).receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\\n        returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0)\\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0)\\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n        ) public returns(address) {\\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            _snapshotBlock,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), _snapshotBlock);\\n        return address(cloneToken);\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount\\n    ) public onlyController returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount\\n    ) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) public onlyController {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\\n    ) constant internal returns (uint) {\\n        if (checkpoints.length == 0) return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock) return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\\n    ) internal  {\\n        if ((checkpoints.length == 0)\\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n               newCheckPoint.fromBlock =  uint128(block.number);\\n               newCheckPoint.value = uint128(_value);\\n           } else {\\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n               oldCheckPoint.value = uint128(_value);\\n           }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0) return false;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () public payable {\\n        require(isContract(controller));\\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) public onlyController {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        address _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken) {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\\n\",\"keccak256\":\"0x5e98063ce7b6a58d41e2d7dfbe651527e2cfaf255f0fe82538783c121259e77f\"},\"./contracts/TokenController.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/// @dev The token controller contract must implement these functions\\ncontract TokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) public payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) public\\n        returns(bool);\\n}\\n\",\"keccak256\":\"0xf8bf7de20c0412ab90ec43c1432508a8316e17bd246adffa737e0d779413ff5e\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "createCloneToken(address,uint256,string,uint8,string,bool)": {
              "notice": "Update the DApp by creating a new token with new functionalities  the msg.sender becomes the controller of this clone token"
            }
          }
        }
      }
    },
    "./contracts/SampleCampaign-TokenController.sol": {
      "Campaign": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "vaultAddress",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_from",
                "type": "address"
              },
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "onTransfer",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "tokenContract",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newVaultAddress",
                "type": "address"
              }
            ],
            "name": "setVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "maximumFunding",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "finalizeFunding",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwner",
                "type": "address"
              }
            ],
            "name": "changeOwner",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "startFundingTime",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "onApprove",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "totalCollected",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "endFundingTime",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              }
            ],
            "name": "proxyPayment",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_startFundingTime",
                "type": "uint256"
              },
              {
                "name": "_endFundingTime",
                "type": "uint256"
              },
              {
                "name": "_maximumFunding",
                "type": "uint256"
              },
              {
                "name": "_vaultAddress",
                "type": "address"
              },
              {
                "name": "_tokenAddress",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "payable": true,
            "stateMutability": "payable",
            "type": "fallback"
          }
        ],
        "devdoc": {
          "methods": {
            "changeOwner(address)": {
              "params": {
                "_newOwner": "The address of the new owner. 0x0 can be used to create  an unowned neutral vault, however that cannot be undone"
              }
            },
            "finalizeFunding()": {
              "details": "`finalizeFunding()` can only be called after the end of the funding period."
            },
            "onApprove(address,address,uint256)": {
              "params": {
                "_amount": "The amount in the `approve()` call",
                "_owner": "The address that calls `approve()`",
                "_spender": "The spender in the `approve()` call"
              },
              "return": "False if the controller does not authorize the approval"
            },
            "onTransfer(address,address,uint256)": {
              "params": {
                "_amount": "The amount of the transfer",
                "_from": "The origin of the transfer",
                "_to": "The destination of the transfer"
              },
              "return": "False if the controller does not authorize the transfer"
            },
            "proxyPayment(address)": {
              "params": {
                "_owner": "The address that will hold the newly created tokens"
              }
            },
            "setVault(address)": {
              "params": {
                "_newVaultAddress": "The address that will receive the ether sent to this  Campaign"
              }
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b60405160a080610604833981016040528080519190602001805191906020018051919060200180519190602001805160008054600160a060020a03191633600160a060020a031617905591505042841080159061006b57508484115b8015610081575069021e19e0c9bab24000008311155b80156100955750600160a060020a03821615155b15156100a057600080fd5b60019490945560029290925560035560058054600160a060020a03938416600160a060020a0319918216179091556006805492909316911617905561051a806100ea6000396000f3006060604052600436106100ab5763ffffffff60e060020a600035041663430bf08a81146100b65780634a393149146100e557806355a373d6146101215780636817031b146101345780638da5cb5b1461015357806399d64ab014610166578063a19ed39d1461018b578063a6f9dae11461019e578063b75ece9c146101bd578063da682aeb146100e5578063e29eb836146101d0578063e4693e98146101e3578063f48c3054146101f6575b6100b43361020a565b005b34156100c157600080fd5b6100c9610383565b604051600160a060020a03909116815260200160405180910390f35b34156100f057600080fd5b61010d600160a060020a0360043581169060243516604435610392565b604051901515815260200160405180910390f35b341561012c57600080fd5b6100c961039b565b341561013f57600080fd5b6100b4600160a060020a03600435166103aa565b341561015e57600080fd5b6100c96103f4565b341561017157600080fd5b610179610403565b60405190815260200160405180910390f35b341561019657600080fd5b6100b4610409565b34156101a957600080fd5b6100b4600160a060020a036004351661047f565b34156101c857600080fd5b6101796104c9565b34156101db57600080fd5b6101796104cf565b34156101ee57600080fd5b6101796104d5565b61010d600160a060020a03600435166104db565b600154421015801561021e57506002544211155b80156102945750600554600160a060020a031663f77c47916000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561026d57600080fd5b6102c65a03f1151561027e57600080fd5b5050506040518051600160a060020a0316151590505b801561029f57503415155b80156102b15750600354346004540111155b15156102bc57600080fd5b6004805434908101909155600654600160a060020a03169080156108fc0290604051600060405180830381858888f1935050505015156102fb57600080fd5b600554600160a060020a031663827f32c0823460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561035a57600080fd5b6102c65a03f1151561036b57600080fd5b50505060405180519050151561038057600080fd5b50565b600654600160a060020a031681565b60019392505050565b600554600160a060020a031681565b60005433600160a060020a039081169116146103c557600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031681565b60035481565b60025442101561041857600080fd5b600554600160a060020a0316633cebb823600060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561046957600080fd5b6102c65a03f1151561047a57600080fd5b505050565b60005433600160a060020a0390811691161461049a57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60015481565b60045481565b60025481565b60006104e68261020a565b5060019190505600a165627a7a7230582083073039faccd746747a95cafdc738f459fd7ea287933fac6aee47875162d37e0029",
            "sourceMap": "1968:5273:2:-;;;3061:728;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1453:5;:18;;-1:-1:-1;;;;;;1453:18:2;1461:10;-1:-1:-1;;;;;1453:18:2;;;;3061:728;-1:-1:-1;;3279:3:2;3260:22;;;;;3259:113;;;3354:17;3336:15;:35;3259:113;:161;;;;;3408:11;3389:15;:30;;3259:161;:227;;;;-1:-1:-1;;;;;;3467:18:2;;;;3259:227;3250:237;;;;;;;;3542:16;:36;;;;3588:14;:32;;;;3630:14;:32;3672:13;:42;;-1:-1:-1;;;;;3672:42:2;;;-1:-1:-1;;;;;;3672:42:2;;;;;;;3754:12;:28;;;;;;;;;;;1968:5273;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100ab5763ffffffff60e060020a600035041663430bf08a81146100b65780634a393149146100e557806355a373d6146101215780636817031b146101345780638da5cb5b1461015357806399d64ab014610166578063a19ed39d1461018b578063a6f9dae11461019e578063b75ece9c146101bd578063da682aeb146100e5578063e29eb836146101d0578063e4693e98146101e3578063f48c3054146101f6575b6100b43361020a565b005b34156100c157600080fd5b6100c9610383565b604051600160a060020a03909116815260200160405180910390f35b34156100f057600080fd5b61010d600160a060020a0360043581169060243516604435610392565b604051901515815260200160405180910390f35b341561012c57600080fd5b6100c961039b565b341561013f57600080fd5b6100b4600160a060020a03600435166103aa565b341561015e57600080fd5b6100c96103f4565b341561017157600080fd5b610179610403565b60405190815260200160405180910390f35b341561019657600080fd5b6100b4610409565b34156101a957600080fd5b6100b4600160a060020a036004351661047f565b34156101c857600080fd5b6101796104c9565b34156101db57600080fd5b6101796104cf565b34156101ee57600080fd5b6101796104d5565b61010d600160a060020a03600435166104db565b600154421015801561021e57506002544211155b80156102945750600554600160a060020a031663f77c47916000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561026d57600080fd5b6102c65a03f1151561027e57600080fd5b5050506040518051600160a060020a0316151590505b801561029f57503415155b80156102b15750600354346004540111155b15156102bc57600080fd5b6004805434908101909155600654600160a060020a03169080156108fc0290604051600060405180830381858888f1935050505015156102fb57600080fd5b600554600160a060020a031663827f32c0823460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561035a57600080fd5b6102c65a03f1151561036b57600080fd5b50505060405180519050151561038057600080fd5b50565b600654600160a060020a031681565b60019392505050565b600554600160a060020a031681565b60005433600160a060020a039081169116146103c557600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031681565b60035481565b60025442101561041857600080fd5b600554600160a060020a0316633cebb823600060405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561046957600080fd5b6102c65a03f1151561047a57600080fd5b505050565b60005433600160a060020a0390811691161461049a57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60015481565b60045481565b60025481565b60006104e68261020a565b5060019190505600a165627a7a7230582083073039faccd746747a95cafdc738f459fd7ea287933fac6aee47875162d37e0029",
            "sourceMap": "1968:5273:2:-;;;;;;;;;-1:-1:-1;;;1968:5273:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4140:21;4150:10;4140:9;:21::i;:::-;1968:5273;2320:27;;;;;;;;;;;;;;;-1:-1:-1;;;;;2320:27:2;;;;;;;;;;;;;;4930:104;;;;;;;;;;-1:-1:-1;;;;;4930:104:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2245:32;;;;;;;;;;;;7136:102;;;;;;;;;;-1:-1:-1;;;;;7136:102:2;;;;;1334:20;;;;;;;;;;;;2145:26;;;;;;;;;;;;;;;;;;;;;;;;;;;6853:117;;;;;;;;;;;;1706:84;;;;;;;;;;-1:-1:-1;;;;;1706:84:2;;;;;2019:28;;;;;;;;;;;;2195:26;;;;;;;;;;;;2082;;;;;;;;;;;;4452:115;;-1:-1:-1;;;;;4452:115:2;;;;;5841:726;5982:16;;5975:3;:23;;5974:64;;;;;6023:14;;6016:3;:21;;5974:64;:113;;;;-1:-1:-1;6055:13:2;;-1:-1:-1;;;;;6055:13:2;:24;:13;:26;;;;;;;;;;-1:-1:-1;;;6055:26:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6055:31:2;;;;-1:-1:-1;5974:113:2;:170;;;;-1:-1:-1;6129:9:2;:14;;5974:170;:232;;;;;6191:14;;6178:9;6161:14;;:26;:44;;5974:232;5965:242;;;;;;;;6262:14;:27;;6280:9;6262:27;;;;;;6339:12;;-1:-1:-1;;;;;6339:12:2;;:28;;;;;;;;;;;;;;;;;;;;;;;6330:38;;;;;;;;6495:13;;-1:-1:-1;;;;;6495:13:2;:28;6524:6;6532:9;6495:13;:47;;;;;;;-1:-1:-1;;;6495:47:2;;;;;;-1:-1:-1;;;;;6495:47:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6486:57;;;;;;;;5841:726;:::o;2320:27::-;;;-1:-1:-1;;;;;2320:27:2;;:::o;4930:104::-;5023:4;4930:104;;;;;:::o;2245:32::-;;;-1:-1:-1;;;;;2245:32:2;;:::o;7136:102::-;1316:5;;1302:10;-1:-1:-1;;;;;1302:19:2;;;1316:5;;1302:19;1293:29;;;;;;7200:12;:31;;-1:-1:-1;;7200:31:2;-1:-1:-1;;;;;7200:31:2;;;;;;;;;;7136:102::o;1334:20::-;;;-1:-1:-1;;;;;1334:20:2;;:::o;2145:26::-;;;;:::o;6853:117::-;6905:14;;6898:3;:21;;6890:30;;;;;;6930:13;;-1:-1:-1;;;;;6930:13:2;:30;:13;:33;;-1:-1:-1;;;6930:33:2;;;;;;-1:-1:-1;;;;;6930:33:2;;;;;;;;;-1:-1:-1;6930:33:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6853:117::o;1706:84::-;1316:5;;1302:10;-1:-1:-1;;;;;1302:19:2;;;1316:5;;1302:19;1293:29;;;;;;1766:5;:17;;-1:-1:-1;;1766:17:2;-1:-1:-1;;;;;1766:17:2;;;;;;;;;;1706:84::o;2019:28::-;;;;:::o;2195:26::-;;;;:::o;2082:::-;;;;:::o;4452:115::-;4506:4;4522:17;4532:6;4522:9;:17::i;:::-;-1:-1:-1;4556:4:2;4452:115;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "261200",
              "executionCost": "121637",
              "totalCost": "382837"
            },
            "external": {
              "": "infinite",
              "changeOwner(address)": "infinite",
              "endFundingTime()": "infinite",
              "finalizeFunding()": "infinite",
              "maximumFunding()": "infinite",
              "onApprove(address,address,uint256)": "infinite",
              "onTransfer(address,address,uint256)": "infinite",
              "owner()": "infinite",
              "proxyPayment(address)": "infinite",
              "setVault(address)": "infinite",
              "startFundingTime()": "infinite",
              "tokenContract()": "infinite",
              "totalCollected()": "infinite",
              "vaultAddress()": "infinite"
            },
            "internal": {
              "doPayment(address)": "infinite"
            }
          },
          "methodIdentifiers": {
            "changeOwner(address)": "a6f9dae1",
            "endFundingTime()": "e4693e98",
            "finalizeFunding()": "a19ed39d",
            "maximumFunding()": "99d64ab0",
            "onApprove(address,address,uint256)": "da682aeb",
            "onTransfer(address,address,uint256)": "4a393149",
            "owner()": "8da5cb5b",
            "proxyPayment(address)": "f48c3054",
            "setVault(address)": "6817031b",
            "startFundingTime()": "b75ece9c",
            "tokenContract()": "55a373d6",
            "totalCollected()": "e29eb836",
            "vaultAddress()": "430bf08a"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVaultAddress\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFunding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startFundingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endFundingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startFundingTime\",\"type\":\"uint256\"},{\"name\":\"_endFundingTime\",\"type\":\"uint256\"},{\"name\":\"_maximumFunding\",\"type\":\"uint256\"},{\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}],\"devdoc\":{\"methods\":{\"changeOwner(address)\":{\"params\":{\"_newOwner\":\"The address of the new owner. 0x0 can be used to create  an unowned neutral vault, however that cannot be undone\"}},\"finalizeFunding()\":{\"details\":\"`finalizeFunding()` can only be called after the end of the funding period.\"},\"onApprove(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount in the `approve()` call\",\"_owner\":\"The address that calls `approve()`\",\"_spender\":\"The spender in the `approve()` call\"},\"return\":\"False if the controller does not authorize the approval\"},\"onTransfer(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of the transfer\",\"_from\":\"The origin of the transfer\",\"_to\":\"The destination of the transfer\"},\"return\":\"False if the controller does not authorize the transfer\"},\"proxyPayment(address)\":{\"params\":{\"_owner\":\"The address that will hold the newly created tokens\"}},\"setVault(address)\":{\"params\":{\"_newVaultAddress\":\"The address that will receive the ether sent to this  Campaign\"}}}},\"userdoc\":{\"methods\":{\"changeOwner(address)\":{\"notice\":\"`owner` can step down and assign some other address to this role\"},\"finalizeFunding()\":{\"notice\":\"`finalizeFunding()` ends the Campaign by calling setting the  controller to 0, thereby ending the issuance of new tokens and stopping the  Campaign from receiving more ether\"},\"onApprove(address,address,uint256)\":{\"notice\":\"Notifies the controller about an approval, for this Campaign all  approvals are allowed by default and no extra notifications are needed\"},\"onTransfer(address,address,uint256)\":{\"notice\":\"Notifies the controller about a transfer, for this Campaign all  transfers are allowed by default and no extra notifications are needed\"},\"proxyPayment(address)\":{\"notice\":\"//////////////`proxyPayment()` allows the caller to send ether to the Campaign and have the tokens created in an address of their choosing\"},\"setVault(address)\":{\"notice\":\"`onlyOwner` changes the location that ether is sent\"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/SampleCampaign-TokenController.sol\":\"Campaign\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":./Controlled.sol=./contracts/Controlled.sol\",\":./TokenController.sol=./contracts/TokenController.sol\",\":MiniMeToken.sol=./contracts/MiniMeToken.sol\"]},\"sources\":{\"./contracts/Controlled.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController { require(msg.sender == controller); _; }\\n\\n    address public controller;\\n\\n    function Controlled() public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) public onlyController {\\n        controller = _newController;\\n    }\\n}\\n\",\"keccak256\":\"0x770798704985a4588762ea932b913bc1df01b4625ab86c5a7278883bbde44b78\"},\"./contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./TokenController.sol\\\";\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct  Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        address _tokenFactory,\\n        address _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public {\\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = MiniMeToken(_parentToken);\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        doTransfer(msg.sender, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount\\n    ) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            require(allowed[_from][msg.sender] >= _amount);\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        doTransfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount\\n    ) internal {\\n\\n           if (_amount == 0) {\\n               Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\\n               return;\\n           }\\n\\n           require(parentSnapShotBlock < block.number);\\n\\n           // Do not allow transfer to 0x0 or the token contract itself\\n           require((_to != 0) && (_to != address(this)));\\n\\n           // If the amount being transfered is more than the balance of the\\n           //  account the transfer throws\\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\\n\\n           require(previousBalanceFrom >= _amount);\\n\\n           // Alerts the token controller of the transfer\\n           if (isContract(controller)) {\\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\\n           }\\n\\n           // First update the balance array with the new value for the address\\n           //  sending the tokens\\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n\\n           // Then update the balance array with the new value for the address\\n           //  receiving the tokens\\n           var previousBalanceTo = balanceOfAt(_to, block.number);\\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n\\n           // An event to make the transfer easy to find on the blockchain\\n           Transfer(_from, _to, _amount);\\n\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender\\n    ) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\\n    ) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        ApproveAndCallFallBack(_spender).receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\\n        returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0)\\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0)\\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n        ) public returns(address) {\\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            _snapshotBlock,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), _snapshotBlock);\\n        return address(cloneToken);\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount\\n    ) public onlyController returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount\\n    ) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) public onlyController {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\\n    ) constant internal returns (uint) {\\n        if (checkpoints.length == 0) return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock) return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\\n    ) internal  {\\n        if ((checkpoints.length == 0)\\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n               newCheckPoint.fromBlock =  uint128(block.number);\\n               newCheckPoint.value = uint128(_value);\\n           } else {\\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n               oldCheckPoint.value = uint128(_value);\\n           }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0) return false;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () public payable {\\n        require(isContract(controller));\\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) public onlyController {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        address _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken) {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\\n\",\"keccak256\":\"0x5e98063ce7b6a58d41e2d7dfbe651527e2cfaf255f0fe82538783c121259e77f\"},\"./contracts/SampleCampaign-TokenController.sol\":{\"content\":\"pragma solidity ^0.4.6;\\n\\n/*\\n    Copyright 2017, Jordi Baylina\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MilestoneTracker Contract\\n/// @author Jordi Baylina\\n/// @dev This contract controls the issuance of tokens for the MiniMe Token\\n///  Contract. This version specifically acts as a Campaign manager for raising\\n///  funds for non-profit causes, but it can be customized for any variety of\\n///  purposes.\\n\\nimport \\\"MiniMeToken.sol\\\";\\n\\n\\n/// @dev `Owned` is a base level contract that assigns an `owner` that can be\\n///  later changed\\ncontract Owned {\\n    /// @dev `owner` is the only address that can call a function with this\\n    /// modifier\\n    modifier onlyOwner { require (msg.sender == owner); _; }\\n\\n    address public owner;\\n\\n    /// @notice The Constructor assigns the message sender to be `owner`\\n    function Owned() { owner = msg.sender;}\\n\\n    /// @notice `owner` can step down and assign some other address to this role\\n    /// @param _newOwner The address of the new owner. 0x0 can be used to create\\n    ///  an unowned neutral vault, however that cannot be undone\\n    function changeOwner(address _newOwner) onlyOwner {\\n        owner = _newOwner;\\n    }\\n}\\n\\n\\n/// @dev This is designed to control the issuance of a MiniMe Token for a\\n///  non-profit Campaign. This contract effectively dictates the terms of the\\n///  funding round.\\n\\ncontract Campaign is TokenController, Owned {\\n\\n    uint public startFundingTime;       // In UNIX Time Format\\n    uint public endFundingTime;         // In UNIX Time Format\\n    uint public maximumFunding;         // In wei\\n    uint public totalCollected;         // In wei\\n    MiniMeToken public tokenContract;   // The new token for this Campaign\\n    address public vaultAddress;        // The address to hold the funds donated\\n\\n/// @notice 'Campaign()' initiates the Campaign by setting its funding\\n/// parameters\\n/// @dev There are several checks to make sure the parameters are acceptable\\n/// @param _startFundingTime The UNIX time that the Campaign will be able to\\n/// start receiving funds\\n/// @param _endFundingTime The UNIX time that the Campaign will stop being able\\n/// to receive funds\\n/// @param _maximumFunding In wei, the Maximum amount that the Campaign can\\n/// receive (currently the max is set at 10,000 ETH for the beta)\\n/// @param _vaultAddress The address that will store the donated funds\\n/// @param _tokenAddress Address of the token contract this contract controls\\n\\n    function Campaign(\\n        uint _startFundingTime,\\n        uint _endFundingTime,\\n        uint _maximumFunding,\\n        address _vaultAddress,\\n        address _tokenAddress\\n\\n    ) {\\n        require ((_endFundingTime >= now) &&           // Cannot end in the past\\n            (_endFundingTime > _startFundingTime) &&\\n            (_maximumFunding <= 10000 ether) &&        // The Beta is limited\\n            (_vaultAddress != 0));                    // To prevent burning ETH\\n        startFundingTime = _startFundingTime;\\n        endFundingTime = _endFundingTime;\\n        maximumFunding = _maximumFunding;\\n        tokenContract = MiniMeToken(_tokenAddress);// The Deployed Token Contract\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n/// @dev The fallback function is called when ether is sent to the contract, it\\n/// simply calls `doPayment()` with the address that sent the ether as the\\n/// `_owner`. Payable is a required solidity modifier for functions to receive\\n/// ether, without this modifier functions will throw if ether is sent to them\\n\\n    function ()  payable {\\n        doPayment(msg.sender);\\n    }\\n\\n/////////////////\\n// TokenController interface\\n/////////////////\\n\\n/// @notice `proxyPayment()` allows the caller to send ether to the Campaign and\\n/// have the tokens created in an address of their choosing\\n/// @param _owner The address that will hold the newly created tokens\\n\\n    function proxyPayment(address _owner) payable returns(bool) {\\n        doPayment(_owner);\\n        return true;\\n    }\\n\\n/// @notice Notifies the controller about a transfer, for this Campaign all\\n///  transfers are allowed by default and no extra notifications are needed\\n/// @param _from The origin of the transfer\\n/// @param _to The destination of the transfer\\n/// @param _amount The amount of the transfer\\n/// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) returns(bool) {\\n        return true;\\n    }\\n\\n/// @notice Notifies the controller about an approval, for this Campaign all\\n///  approvals are allowed by default and no extra notifications are needed\\n/// @param _owner The address that calls `approve()`\\n/// @param _spender The spender in the `approve()` call\\n/// @param _amount The amount in the `approve()` call\\n/// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount)\\n        returns(bool)\\n    {\\n        return true;\\n    }\\n\\n\\n/// @dev `doPayment()` is an internal function that sends the ether that this\\n///  contract receives to the `vault` and creates tokens in the address of the\\n///  `_owner` assuming the Campaign is still accepting funds\\n/// @param _owner The address that will hold the newly created tokens\\n\\n    function doPayment(address _owner) internal {\\n\\n// First check that the Campaign is allowed to receive this donation\\n        require ((now >= startFundingTime) &&\\n            (now <= endFundingTime) &&\\n            (tokenContract.controller() != 0) &&           // Extra check\\n            (msg.value != 0) &&\\n            (totalCollected + msg.value <= maximumFunding));\\n\\n//Track how much the Campaign has collected\\n        totalCollected += msg.value;\\n\\n//Send the ether to the vault\\n        require (vaultAddress.send(msg.value));\\n\\n// Creates an equal amount of tokens as ether sent. The new tokens are created\\n//  in the `_owner` address\\n        require (tokenContract.generateTokens(_owner, msg.value));\\n\\n        return;\\n    }\\n\\n/// @notice `finalizeFunding()` ends the Campaign by calling setting the\\n///  controller to 0, thereby ending the issuance of new tokens and stopping the\\n///  Campaign from receiving more ether\\n/// @dev `finalizeFunding()` can only be called after the end of the funding period.\\n\\n    function finalizeFunding() {\\n        require(now >= endFundingTime);\\n        tokenContract.changeController(0);\\n    }\\n\\n\\n/// @notice `onlyOwner` changes the location that ether is sent\\n/// @param _newVaultAddress The address that will receive the ether sent to this\\n///  Campaign\\n    function setVault(address _newVaultAddress) onlyOwner {\\n        vaultAddress = _newVaultAddress;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf442c850e56095399f35b12ccec5469d36276578632a998f48d094f9844c817b\"},\"./contracts/TokenController.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/// @dev The token controller contract must implement these functions\\ncontract TokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) public payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) public\\n        returns(bool);\\n}\\n\",\"keccak256\":\"0xf8bf7de20c0412ab90ec43c1432508a8316e17bd246adffa737e0d779413ff5e\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "changeOwner(address)": {
              "notice": "`owner` can step down and assign some other address to this role"
            },
            "finalizeFunding()": {
              "notice": "`finalizeFunding()` ends the Campaign by calling setting the  controller to 0, thereby ending the issuance of new tokens and stopping the  Campaign from receiving more ether"
            },
            "onApprove(address,address,uint256)": {
              "notice": "Notifies the controller about an approval, for this Campaign all  approvals are allowed by default and no extra notifications are needed"
            },
            "onTransfer(address,address,uint256)": {
              "notice": "Notifies the controller about a transfer, for this Campaign all  transfers are allowed by default and no extra notifications are needed"
            },
            "proxyPayment(address)": {
              "notice": "//////////////`proxyPayment()` allows the caller to send ether to the Campaign and have the tokens created in an address of their choosing"
            },
            "setVault(address)": {
              "notice": "`onlyOwner` changes the location that ether is sent"
            }
          }
        }
      },
      "Owned": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newOwner",
                "type": "address"
              }
            ],
            "name": "changeOwner",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          }
        ],
        "devdoc": {
          "methods": {
            "changeOwner(address)": {
              "params": {
                "_newOwner": "The address of the new owner. 0x0 can be used to create  an unowned neutral vault, however that cannot be undone"
              }
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a03199091161790556101668061003b6000396000f30060606040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638da5cb5b8114610050578063a6f9dae11461008c575b600080fd5b341561005b57600080fd5b6100636100ba565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561009757600080fd5b6100b873ffffffffffffffffffffffffffffffffffffffff600435166100d6565b005b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000543373ffffffffffffffffffffffffffffffffffffffff9081169116146100fe57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff929092169190911790555600a165627a7a723058200c224012c5058fbdef46525e5f7b88f8313e52d55b0d48900aa49f0715e15bb80029",
            "sourceMap": "1158:634:2:-;;;1434:39;;;;;;;;1453:5;:18;;-1:-1:-1;;;;;1461:10:2;1453:18;-1:-1:-1;;;;;;1453:18:2;;;;;;1158:634;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "60606040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638da5cb5b8114610050578063a6f9dae11461008c575b600080fd5b341561005b57600080fd5b6100636100ba565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561009757600080fd5b6100b873ffffffffffffffffffffffffffffffffffffffff600435166100d6565b005b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000543373ffffffffffffffffffffffffffffffffffffffff9081169116146100fe57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff929092169190911790555600a165627a7a723058200c224012c5058fbdef46525e5f7b88f8313e52d55b0d48900aa49f0715e15bb80029",
            "sourceMap": "1158:634:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;1334:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1706:84;;;;;;;;;;;;;;;;;;1334:20;;;;;;:::o;1706:84::-;1316:5;;1302:10;1316:5;1302:19;;;1316:5;;1302:19;1293:29;;;;;;1766:5;:17;;-1:-1:-1;;1766:17:2;;;;;;;;;;;;1706:84::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "71600",
              "executionCost": "20491",
              "totalCost": "92091"
            },
            "external": {
              "changeOwner(address)": "20644",
              "owner()": "388"
            }
          },
          "methodIdentifiers": {
            "changeOwner(address)": "a6f9dae1",
            "owner()": "8da5cb5b"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{\"changeOwner(address)\":{\"params\":{\"_newOwner\":\"The address of the new owner. 0x0 can be used to create  an unowned neutral vault, however that cannot be undone\"}}}},\"userdoc\":{\"methods\":{\"changeOwner(address)\":{\"notice\":\"`owner` can step down and assign some other address to this role\"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/SampleCampaign-TokenController.sol\":\"Owned\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":./Controlled.sol=./contracts/Controlled.sol\",\":./TokenController.sol=./contracts/TokenController.sol\",\":MiniMeToken.sol=./contracts/MiniMeToken.sol\"]},\"sources\":{\"./contracts/Controlled.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController { require(msg.sender == controller); _; }\\n\\n    address public controller;\\n\\n    function Controlled() public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) public onlyController {\\n        controller = _newController;\\n    }\\n}\\n\",\"keccak256\":\"0x770798704985a4588762ea932b913bc1df01b4625ab86c5a7278883bbde44b78\"},\"./contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./Controlled.sol\\\";\\nimport \\\"./TokenController.sol\\\";\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct  Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        address _tokenFactory,\\n        address _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public {\\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = MiniMeToken(_parentToken);\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        doTransfer(msg.sender, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount\\n    ) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            require(allowed[_from][msg.sender] >= _amount);\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        doTransfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount\\n    ) internal {\\n\\n           if (_amount == 0) {\\n               Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\\n               return;\\n           }\\n\\n           require(parentSnapShotBlock < block.number);\\n\\n           // Do not allow transfer to 0x0 or the token contract itself\\n           require((_to != 0) && (_to != address(this)));\\n\\n           // If the amount being transfered is more than the balance of the\\n           //  account the transfer throws\\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\\n\\n           require(previousBalanceFrom >= _amount);\\n\\n           // Alerts the token controller of the transfer\\n           if (isContract(controller)) {\\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\\n           }\\n\\n           // First update the balance array with the new value for the address\\n           //  sending the tokens\\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n\\n           // Then update the balance array with the new value for the address\\n           //  receiving the tokens\\n           var previousBalanceTo = balanceOfAt(_to, block.number);\\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n\\n           // An event to make the transfer easy to find on the blockchain\\n           Transfer(_from, _to, _amount);\\n\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender\\n    ) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\\n    ) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        ApproveAndCallFallBack(_spender).receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\\n        returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0)\\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0)\\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n        ) public returns(address) {\\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            _snapshotBlock,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), _snapshotBlock);\\n        return address(cloneToken);\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount\\n    ) public onlyController returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount\\n    ) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) public onlyController {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\\n    ) constant internal returns (uint) {\\n        if (checkpoints.length == 0) return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock) return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\\n    ) internal  {\\n        if ((checkpoints.length == 0)\\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n               newCheckPoint.fromBlock =  uint128(block.number);\\n               newCheckPoint.value = uint128(_value);\\n           } else {\\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n               oldCheckPoint.value = uint128(_value);\\n           }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0) return false;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () public payable {\\n        require(isContract(controller));\\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) public onlyController {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        address _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken) {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n            );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\\n\",\"keccak256\":\"0x5e98063ce7b6a58d41e2d7dfbe651527e2cfaf255f0fe82538783c121259e77f\"},\"./contracts/SampleCampaign-TokenController.sol\":{\"content\":\"pragma solidity ^0.4.6;\\n\\n/*\\n    Copyright 2017, Jordi Baylina\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MilestoneTracker Contract\\n/// @author Jordi Baylina\\n/// @dev This contract controls the issuance of tokens for the MiniMe Token\\n///  Contract. This version specifically acts as a Campaign manager for raising\\n///  funds for non-profit causes, but it can be customized for any variety of\\n///  purposes.\\n\\nimport \\\"MiniMeToken.sol\\\";\\n\\n\\n/// @dev `Owned` is a base level contract that assigns an `owner` that can be\\n///  later changed\\ncontract Owned {\\n    /// @dev `owner` is the only address that can call a function with this\\n    /// modifier\\n    modifier onlyOwner { require (msg.sender == owner); _; }\\n\\n    address public owner;\\n\\n    /// @notice The Constructor assigns the message sender to be `owner`\\n    function Owned() { owner = msg.sender;}\\n\\n    /// @notice `owner` can step down and assign some other address to this role\\n    /// @param _newOwner The address of the new owner. 0x0 can be used to create\\n    ///  an unowned neutral vault, however that cannot be undone\\n    function changeOwner(address _newOwner) onlyOwner {\\n        owner = _newOwner;\\n    }\\n}\\n\\n\\n/// @dev This is designed to control the issuance of a MiniMe Token for a\\n///  non-profit Campaign. This contract effectively dictates the terms of the\\n///  funding round.\\n\\ncontract Campaign is TokenController, Owned {\\n\\n    uint public startFundingTime;       // In UNIX Time Format\\n    uint public endFundingTime;         // In UNIX Time Format\\n    uint public maximumFunding;         // In wei\\n    uint public totalCollected;         // In wei\\n    MiniMeToken public tokenContract;   // The new token for this Campaign\\n    address public vaultAddress;        // The address to hold the funds donated\\n\\n/// @notice 'Campaign()' initiates the Campaign by setting its funding\\n/// parameters\\n/// @dev There are several checks to make sure the parameters are acceptable\\n/// @param _startFundingTime The UNIX time that the Campaign will be able to\\n/// start receiving funds\\n/// @param _endFundingTime The UNIX time that the Campaign will stop being able\\n/// to receive funds\\n/// @param _maximumFunding In wei, the Maximum amount that the Campaign can\\n/// receive (currently the max is set at 10,000 ETH for the beta)\\n/// @param _vaultAddress The address that will store the donated funds\\n/// @param _tokenAddress Address of the token contract this contract controls\\n\\n    function Campaign(\\n        uint _startFundingTime,\\n        uint _endFundingTime,\\n        uint _maximumFunding,\\n        address _vaultAddress,\\n        address _tokenAddress\\n\\n    ) {\\n        require ((_endFundingTime >= now) &&           // Cannot end in the past\\n            (_endFundingTime > _startFundingTime) &&\\n            (_maximumFunding <= 10000 ether) &&        // The Beta is limited\\n            (_vaultAddress != 0));                    // To prevent burning ETH\\n        startFundingTime = _startFundingTime;\\n        endFundingTime = _endFundingTime;\\n        maximumFunding = _maximumFunding;\\n        tokenContract = MiniMeToken(_tokenAddress);// The Deployed Token Contract\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n/// @dev The fallback function is called when ether is sent to the contract, it\\n/// simply calls `doPayment()` with the address that sent the ether as the\\n/// `_owner`. Payable is a required solidity modifier for functions to receive\\n/// ether, without this modifier functions will throw if ether is sent to them\\n\\n    function ()  payable {\\n        doPayment(msg.sender);\\n    }\\n\\n/////////////////\\n// TokenController interface\\n/////////////////\\n\\n/// @notice `proxyPayment()` allows the caller to send ether to the Campaign and\\n/// have the tokens created in an address of their choosing\\n/// @param _owner The address that will hold the newly created tokens\\n\\n    function proxyPayment(address _owner) payable returns(bool) {\\n        doPayment(_owner);\\n        return true;\\n    }\\n\\n/// @notice Notifies the controller about a transfer, for this Campaign all\\n///  transfers are allowed by default and no extra notifications are needed\\n/// @param _from The origin of the transfer\\n/// @param _to The destination of the transfer\\n/// @param _amount The amount of the transfer\\n/// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) returns(bool) {\\n        return true;\\n    }\\n\\n/// @notice Notifies the controller about an approval, for this Campaign all\\n///  approvals are allowed by default and no extra notifications are needed\\n/// @param _owner The address that calls `approve()`\\n/// @param _spender The spender in the `approve()` call\\n/// @param _amount The amount in the `approve()` call\\n/// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount)\\n        returns(bool)\\n    {\\n        return true;\\n    }\\n\\n\\n/// @dev `doPayment()` is an internal function that sends the ether that this\\n///  contract receives to the `vault` and creates tokens in the address of the\\n///  `_owner` assuming the Campaign is still accepting funds\\n/// @param _owner The address that will hold the newly created tokens\\n\\n    function doPayment(address _owner) internal {\\n\\n// First check that the Campaign is allowed to receive this donation\\n        require ((now >= startFundingTime) &&\\n            (now <= endFundingTime) &&\\n            (tokenContract.controller() != 0) &&           // Extra check\\n            (msg.value != 0) &&\\n            (totalCollected + msg.value <= maximumFunding));\\n\\n//Track how much the Campaign has collected\\n        totalCollected += msg.value;\\n\\n//Send the ether to the vault\\n        require (vaultAddress.send(msg.value));\\n\\n// Creates an equal amount of tokens as ether sent. The new tokens are created\\n//  in the `_owner` address\\n        require (tokenContract.generateTokens(_owner, msg.value));\\n\\n        return;\\n    }\\n\\n/// @notice `finalizeFunding()` ends the Campaign by calling setting the\\n///  controller to 0, thereby ending the issuance of new tokens and stopping the\\n///  Campaign from receiving more ether\\n/// @dev `finalizeFunding()` can only be called after the end of the funding period.\\n\\n    function finalizeFunding() {\\n        require(now >= endFundingTime);\\n        tokenContract.changeController(0);\\n    }\\n\\n\\n/// @notice `onlyOwner` changes the location that ether is sent\\n/// @param _newVaultAddress The address that will receive the ether sent to this\\n///  Campaign\\n    function setVault(address _newVaultAddress) onlyOwner {\\n        vaultAddress = _newVaultAddress;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf442c850e56095399f35b12ccec5469d36276578632a998f48d094f9844c817b\"},\"./contracts/TokenController.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/// @dev The token controller contract must implement these functions\\ncontract TokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) public payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) public\\n        returns(bool);\\n}\\n\",\"keccak256\":\"0xf8bf7de20c0412ab90ec43c1432508a8316e17bd246adffa737e0d779413ff5e\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "changeOwner(address)": {
              "notice": "`owner` can step down and assign some other address to this role"
            }
          }
        }
      }
    },
    "./contracts/TokenController.sol": {
      "TokenController": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "_from",
                "type": "address"
              },
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "onTransfer",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_spender",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "onApprove",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              }
            ],
            "name": "proxyPayment",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {
            "onApprove(address,address,uint256)": {
              "params": {
                "_amount": "The amount in the `approve()` call",
                "_owner": "The address that calls `approve()`",
                "_spender": "The spender in the `approve()` call"
              },
              "return": "False if the controller does not authorize the approval"
            },
            "onTransfer(address,address,uint256)": {
              "params": {
                "_amount": "The amount of the transfer",
                "_from": "The origin of the transfer",
                "_to": "The destination of the transfer"
              },
              "return": "False if the controller does not authorize the transfer"
            },
            "proxyPayment(address)": {
              "params": {
                "_owner": "The address that sent the ether to create tokens"
              },
              "return": "True if the ether is accepted, false if it throws"
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "onApprove(address,address,uint256)": "da682aeb",
            "onTransfer(address,address,uint256)": "4a393149",
            "proxyPayment(address)": "f48c3054"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {
            "onApprove(address,address,uint256)": {
              "notice": "Notifies the controller about an approval allowing the  controller to react if desired"
            },
            "onTransfer(address,address,uint256)": {
              "notice": "Notifies the controller about a token transfer allowing the  controller to react if desired"
            },
            "proxyPayment(address)": {
              "notice": "Called when `_owner` sends ether to the MiniMe Token contract"
            }
          }
        }
      }
    }
  },
  "errors": [
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:40:5: Warning: No visibility specified. Defaulting to \"public\".\n    function Owned() { owner = msg.sender;}\n    ^-------------------------------------^\n",
      "message": "No visibility specified. Defaulting to \"public\".",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:45:5: Warning: No visibility specified. Defaulting to \"public\".\n    function changeOwner(address _newOwner) onlyOwner {\n    ^\nSpanning multiple lines.\n",
      "message": "No visibility specified. Defaulting to \"public\".",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:76:5: Warning: No visibility specified. Defaulting to \"public\".\n    function Campaign(\n    ^\nSpanning multiple lines.\n",
      "message": "No visibility specified. Defaulting to \"public\".",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:100:5: Warning: No visibility specified. Defaulting to \"public\".\n    function ()  payable {\n    ^\nSpanning multiple lines.\n",
      "message": "No visibility specified. Defaulting to \"public\".",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:112:5: Warning: No visibility specified. Defaulting to \"public\".\n    function proxyPayment(address _owner) payable returns(bool) {\n    ^\nSpanning multiple lines.\n",
      "message": "No visibility specified. Defaulting to \"public\".",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:123:5: Warning: No visibility specified. Defaulting to \"public\".\n    function onTransfer(address _from, address _to, uint _amount) returns(bool) {\n    ^\nSpanning multiple lines.\n",
      "message": "No visibility specified. Defaulting to \"public\".",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:133:5: Warning: No visibility specified. Defaulting to \"public\".\n    function onApprove(address _owner, address _spender, uint _amount)\n    ^\nSpanning multiple lines.\n",
      "message": "No visibility specified. Defaulting to \"public\".",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:172:5: Warning: No visibility specified. Defaulting to \"public\".\n    function finalizeFunding() {\n    ^\nSpanning multiple lines.\n",
      "message": "No visibility specified. Defaulting to \"public\".",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:181:5: Warning: No visibility specified. Defaulting to \"public\".\n    function setVault(address _newVaultAddress) onlyOwner {\n    ^\nSpanning multiple lines.\n",
      "message": "No visibility specified. Defaulting to \"public\".",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:123:25: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function onTransfer(address _from, address _to, uint _amount) returns(bool) {\n                        ^-----------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:123:40: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function onTransfer(address _from, address _to, uint _amount) returns(bool) {\n                                       ^---------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:123:53: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function onTransfer(address _from, address _to, uint _amount) returns(bool) {\n                                                    ^----------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:133:24: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function onApprove(address _owner, address _spender, uint _amount)\n                       ^------------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:133:40: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function onApprove(address _owner, address _spender, uint _amount)\n                                       ^--------------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/SampleCampaign-TokenController.sol:133:58: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function onApprove(address _owner, address _spender, uint _amount)\n                                                         ^----------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "type": "Warning"
    }
  ],
  "sources": {
    "./contracts/Controlled.sol": {
      "id": 0
    },
    "./contracts/MiniMeToken.sol": {
      "id": 1
    },
    "./contracts/SampleCampaign-TokenController.sol": {
      "id": 2
    },
    "./contracts/TokenController.sol": {
      "id": 3
    }
  }
}